head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2005.06.02.19.38.57;	author irrer;	state dead;
branches;
next	1.3;
deltatype	text;
permissions	444;
commitid	97c429f60342e72;
kopt	kv;
filename	make_db;

1.3
date	2005.05.09.15.53.14;	author irrer;	state Exp;
branches;
next	1.2;
deltatype	text;
permissions	666;
commitid	8a8427f86af2c7b;
kopt	kv;
filename	make_db;

1.2
date	2005.05.09.12.57.13;	author irrer;	state Exp;
branches;
next	1.1;
deltatype	text;
permissions	666;
commitid	908427f5e1527e5;
kopt	kv;
filename	make_db;

1.1
date	2005.04.11.16.16.53;	author irrer;	state Exp;
branches;
next	;
deltatype	text;
permissions	666;
commitid	e38425aa29033f4;
kopt	kv;
filename	make_db;


desc
@@


1.4
log
@Rework of policy engine.
@
text
@#mysql statement to grant everything:
#
#    grant all privileges on *.* to 'irrer'@@'localhost';
#
#creating a table
#
#    CREATE TABLE pet (name VARCHAR(20), owner VARCHAR(20),
#        species VARCHAR(20), sex CHAR(1), birth DATE, death DATE);


    DROP DATABASE sedb;

    CREATE DATABASE sedb;

    USE sedb;

    # a physical building
    CREATE TABLE building (
        building      VARCHAR(12) NOT NULL,
        PRIMARY KEY (building)
    );

    # room within a building
    CREATE TABLE room (
        room          VARCHAR(12) NOT NULL,
        building      VARCHAR(12) NOT NULL REFERENCES location(building),
        PRIMARY KEY (room, building)
    );

    # specific geographical location
    CREATE TABLE location (
        location      VARCHAR(12) NOT NULL,
        room          VARCHAR(12) NOT NULL REFERENCES location(room),
        building      VARCHAR(12) NOT NULL REFERENCES location(building),
        PRIMARY KEY (location, room, building) 
    );

    # a physical host
    CREATE TABLE host (
        name          VARCHAR(24), # host name
        type          VARCHAR(30), # type of host (user defined)
        OS            VARCHAR(30), # operating host
        user          VARCHAR(10), # primary user of host
        owner         VARCHAR(10), # department or other entity owning this host
        admin         VARCHAR(10), # administrator of this host
        PRIMARY KEY (name)
    );

    CREATE TABLE physical_disk (
        name          VARCHAR(30) NOT NULL,  # unique name for this disk
        host          VARCHAR(24) NOT NULL REFERENCES host(name),
        directory     VARCHAR(30) NOT NULL,
        kilobytes     BIGINT      NOT NULL,  # total kb allocated
        kilo_unused   BIGINT      NOT NULL,  # remaining kb available (unclaimed)
        hardware      VARCHAR(10),
        location      VARCHAR(12) NOT NULL REFERENCES location(location),
        room          VARCHAR(12) NOT NULL REFERENCES location(room),
        building      VARCHAR(12) NOT NULL REFERENCES location(building),
        user          VARCHAR(10),
        owner         VARCHAR(10),
        admin         VARCHAR(10),
        model         VARCHAR(10),
        speed         VARCHAR(10),
        value         FLOAT  (24),
        PRIMARY KEY (name)
    );

    # describe how to select a disk that is appropriate for this virtual disk
    CREATE TABLE virt_disk_policy (
        name          VARCHAR(24)   NOT NULL,
        policy        TEXT          NOT NULL,
        PRIMARY KEY (name)
    );

    # a virtual disk, used as one virtual disk of a sefs
    CREATE TABLE virt_disk (
        name              VARCHAR(24),
        physical_disk     VARCHAR(30) NOT NULL REFERENCES physical_disk(name),
        kilobytes         BIGINT (20) NOT NULL, # amount used from this phys disk
        virt_disk_policy  VARCHAR(24) NOT NULL REFERENCES virt_disk_policy(name),
        block_size        INT(16)     NOT NULL, # block size in bytes
        PRIMARY KEY (name, physical_disk)
    );

    # SynerEdge file system as seen by the end user
    CREATE TABLE sefs (
        name              VARCHAR(24) NOT NULL,
        virt_disk         VARCHAR(24) NOT NULL REFERENCES virt_disk(name),
        PRIMARY KEY (name, virt_disk)
    );

    SHOW TABLES;

    DESCRIBE location;
    DESCRIBE host;
    DESCRIBE physical_disk;
    DESCRIBE virt_disk;


    LOAD DATA LOCAL INFILE 'host.lod'             INTO TABLE host;
    LOAD DATA LOCAL INFILE 'building.lod'         INTO TABLE building;
    LOAD DATA LOCAL INFILE 'room.lod'             INTO TABLE room;
    LOAD DATA LOCAL INFILE 'location.lod'         INTO TABLE location;
    LOAD DATA LOCAL INFILE 'physical_disk.lod'    INTO TABLE physical_disk;
    LOAD DATA LOCAL INFILE 'virt_disk_policy.lod' INTO TABLE virt_disk_policy;


    SELECT * from building;
    SELECT * from room;
    SELECT * from location;
    SELECT * from host;
    SELECT name,host,directory,kilobytes,kilo_unused,location,room,building from physical_disk;
    SELECT * from virt_disk_policy;


quit
@


1.3
log
@Made utility to generate typedefs based on database tables and fields.

Updated files to use and test SEDB.h.

Changed varchar(5000) field to text (in make_db) because
mysql was converting it anyway.
@
text
@@


1.2
log
@Added files for policy manipulation.
@
text
@d71 1
a71 1
        policy        VARCHAR(5000) NOT NULL,
@


1.1
log
@The populate script makes files used to populate the
database, and then invokes mysql with commands from make_db
that makes the database.  This requirs that mysql be
installed, and has only been tested on a Linux system.
@
text
@d50 1
a50 1
        id            VARCHAR(30) NOT NULL,  # unique id for this disk
d65 1
a65 1
        PRIMARY KEY (id)
d78 2
d81 2
a82 4
        phys_disk_host    VARCHAR(24) NOT NULL REFERENCES physical_disk(host),
        phys_disk_dir     VARCHAR(24) NOT NULL REFERENCES physical_disk(directory),
        kilobytes         BIGINT (20) NOT NULL,
        PRIMARY KEY (name)
d88 2
a89 2
        virt_disk_inst    VARCHAR(24) NOT NULL REFERENCES virt_disk_instance(name),
        PRIMARY KEY   (name, virt_disk_inst)
d100 7
a106 5
    LOAD DATA LOCAL INFILE 'host.lod'          INTO TABLE host;
    LOAD DATA LOCAL INFILE 'building.lod'      INTO TABLE building;
    LOAD DATA LOCAL INFILE 'room.lod'          INTO TABLE room;
    LOAD DATA LOCAL INFILE 'location.lod'      INTO TABLE location;
    LOAD DATA LOCAL INFILE 'physical_disk.lod' INTO TABLE physical_disk;
d112 3
a114 1
    SELECT * from physical_disk;
@

