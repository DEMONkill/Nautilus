head	1.2;
access;
symbols;
locks; strict;
comment	@// @;


1.2
date	2005.06.02.20.34.24;	author irrer;	state dead;
branches;
next	1.1;
deltatype	text;
permissions	444;
commitid	b08429f6d3658ec;
kopt	kv;
filename	@VirtualDiskPolicy.cpp@;

1.1
date	2005.06.02.19.38.55;	author irrer;	state Exp;
branches;
next	;
deltatype	text;
permissions	666;
commitid	97c429f60342e72;
kopt	kv;
filename	@VirtualDiskPolicy.cpp@;


desc
@@


1.2
log
@Renaming files to Pol* to avoid naming conflicts.
@
text
@
#include <VirtualDiskPolicy.hpp>

// ------------------------------------------------------------------------

VirtualDiskPolicy::VirtualDiskPolicy(void)
{
    db = NULL;
    errorMessage = "";
    selected = false;
}

// ------------------------------------------------------------------------

/**
 * Clean up.
 */
VirtualDiskPolicy::~VirtualDiskPolicy(void)
{
    if (db != NULL) {
        delete db;
        db = NULL;
    }
}

// ------------------------------------------------------------------------

/**
 * Initialize local variables.
 *
 * @@return True on success.
 */
bool VirtualDiskPolicy::initialize(void)
{
    errorMessage = "";
    if (db == NULL) {
        try {
            db = new DBinterface();
        }
        catch (DBexception *ex) {
            errorMessage = "Unable to open database: ";
            errorMessage += ex->toString();
            return false;
        }
    }
    return true;
}

// ------------------------------------------------------------------------

/**
 * insert a new virtual disk policy.
 *
 * @@param name Name of virtual disk policy.
 *
 * @@param policy Disk policy.
 *
 * @@return Return true on success, false on failure.
 */
bool VirtualDiskPolicy::Insert(const char *name, const char *policy)
{
    if (!initialize()) {
        return false;
    }
    // determine if the policy is valid.  Try to do a query on
    // it, and if it suceeds, then it is ok.  Note that it may not
    // return any block files.
    char query[100 + strlen(policy)];
    // make sure we have the table and field names right
    sizeof(SEDB_block_file__host);
    sizeof(SEDB_virtual_disk);

    // make a query with this policy.  If it works, the policy is valid.
    sprintf(query, "SELECT host FROM block_file WHERE %s", policy);
    selected = false;
    if (db->execute(query)) {

        // Insert it into the table.  If it works, then all is ok. 
        // If not, then some other problem, probably there is already
        // an entry by that name.
        string qPolicy = "";
        for (int c = 0; c < strlen(policy); c++) {
            if (policy[c] == '\'') {
                qPolicy += "\\'";
            }
            else {
                qPolicy += policy[c];
            }
        }
        char insert[100+strlen(name)+strlen(qPolicy.c_str())];

        sprintf(insert, "INSERT INTO virtual_disk_policy VALUES ('%s', '%s')",
            name, qPolicy.c_str());
        if (db->execute(insert)) {
            return true;
        }
        errorMessage = "Unable to insert: ";
        errorMessage += db->error();
        return false;
    }
    errorMessage = "Invalid policy does not properly select disks: ";
    errorMessage += db->error();
    return false;
}

// ------------------------------------------------------------------------

/**
 * Delete the given policy.  Before doing so, make sure that
 * no virtual disks depend on it.  Also, fail if it does not exist.
 *
 * @@parameter name Name of virtual disk policy.
 *
 * @@return Return true on success, false on failure.
 */

bool VirtualDiskPolicy::Delete(const char *name)
{
    if (!initialize()) {
        return false;
    }
    // allocate enough space for all queries.  Also make sure
    // that the proper database names are being used.
    char query[200 +
        sizeof(SEDB_virtual_disk__virtual_disk_policy) +
        sizeof(SEDB_virtual_disk__name) +
        sizeof(SEDB_virtual_disk_policy__name)];

    // Determine if this virtual_disk_policy is being used.  If
    // so, then do not allow it to be deleted.
    sprintf(query, "SELECT name FROM virtual_disk WHERE virtual_disk_policy = '%s'", name);
    selected = false;
    if (db->execute(query)) {
        if (db->getNumRows() > 0) {
            errorMessage = "Can not delete virtual disk policy ";
            errorMessage += name;
            errorMessage += " because it is in use by virtual disk ";
            errorMessage += db->get(0,0);
            return false;
        }
        sprintf(query, "SELECT * FROM virtual_disk_policy WHERE name = '%s'", name);
        if (db->execute(query)) {
            if (db->getNumRows() == 0) {
                errorMessage = "No such virtual_disk_policy : ";
                errorMessage += name;
                return false;
            }
            else {
                sprintf(query, "DELETE FROM virtual_disk_policy WHERE name = '%s'", name);
                if (db->execute(query)) {
                    return true;
                }
            }
        }
        else {
            errorMessage = "Unable to delete virtual disk policy ";
            errorMessage += name;
            errorMessage += " : ";
            errorMessage += db->error();
            return false;
        }
    }

    errorMessage = "Unable to delete virtual disk policy ";
    errorMessage += name;
    errorMessage += " : ";
    errorMessage += db->error();
    return false;
}

// ------------------------------------------------------------------------

/**
 * Perform a select on the database, fetching all columns of all rows.
 *
 * @@return True on success.
 */

bool VirtualDiskPolicy::Select(void)
{
    if (!initialize()) {
        return false;
    }
    sizeof(SEDB_virtual_disk_policy);        // assert that we have the right table name
    sizeof(SEDB_virtual_disk_policy__name);  // assert that we have the right field name

    if (db->execute("SELECT * FROM virtual_disk_policy ORDER BY name")) {
        selected = true;
        return true;
    }
    else {
        errorMessage = "Unable to perform select on table virtual_disk_policy: ";
        errorMessage += db->error();
    }
    return false;
}

// ------------------------------------------------------------------------

/**
 * Get selected item from table.
 *
 * @@param row Zero relative row in table.
 *
 * @@param wol Zero relative column in table.
 *
 * @@return Value at given row and column, or NULL if it does not exist.
 */
const char *VirtualDiskPolicy::get(int row, int col)
{
    if (!initialize()) {
        return false;
    }

    // if a select was not performed, then do so.
    if (!selected) {
        if (!Select()) {
            return false;
        }
    }

    return db->get(row, col);
}

// ------------------------------------------------------------------------

/**
 * Get the most recent error.  If no error, return and empty string.
 *
 * @@return Error message, or empty string if none.
 */
const char *VirtualDiskPolicy::Error(void)
{
    return errorMessage.c_str();
}

@


1.1
log
@Rework of policy engine.
@
text
@@

