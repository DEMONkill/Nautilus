head	1.3;
access;
symbols;
locks; strict;
comment	@// @;


1.3
date	2005.06.02.19.38.54;	author irrer;	state dead;
branches;
next	1.2;
deltatype	text;
permissions	444;
commitid	97c429f60342e72;
kopt	kv;
filename	@PrintSEDiskFile.cpp@;

1.2
date	2005.05.09.15.53.13;	author irrer;	state Exp;
branches;
next	1.1;
deltatype	text;
permissions	666;
commitid	8a8427f86af2c7b;
kopt	kv;
filename	@PrintSEDiskFile.cpp@;

1.1
date	2005.05.09.14.39.16;	author irrer;	state Exp;
branches;
next	;
deltatype	text;
permissions	666;
commitid	f9c427f76007600;
kopt	kv;
filename	@PrintSEDiskFile.cpp@;


desc
@@


1.3
log
@Rework of policy engine.
@
text
@
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vector>

#include <PolicyUtil.hpp>
#include <SEDB.h>
#include <DBinterface.hpp>
#include <DBexception.hpp>

static void usage (char **argv, const char *msg)
{
    // show the user the special error
    fprintf(stderr, "%s\n", msg);

    // determine the name of this executable
    char *myname = argv[0];
    while (strchr(myname, '/') != NULL) {
        myname = strchr(myname, '/');
    }
    // print standard usage message
    fprintf(stderr, "Usage: \n    %s se_disk_name\n", myname);

    // abort with error exit status
    exit(1);
}

// ------------------------------------------------------------------------

// structure to contain virtual disk and list of them
typedef struct VirtDiskStruct
{
    char name[25];
} VirtDisk;
typedef VirtDisk* VirtDiskPtr;
typedef vector<VirtDiskPtr> VirtDiskList;


// define the pertinent information for a single physical disk
typedef struct DiskUsageStruct
{
    char name[31];       // name of physical disk
    int64 usage;         // kbytes allocated from this physical disk
} DiskUsage;
typedef DiskUsage* DiskUsagePtr;
typedef vector<DiskUsagePtr> DiskUsageList;

// ------------------------------------------------------------------------

int main(int argc, char **argv)
{
    if (argc < 2) {
        usage(argv, "Insufficient number of parameters.");
    }

    // put convenient names on parameters
    char *seName = argv[1];

    // database to query.

    DBinterface *db = NULL;
    try {
        db = new DBinterface();
    }
    catch (DBexception *ex) {
        fprintf(stderr, "Unable to open database: %s\n", ex->toString());
        exit(1);
    }

    char query[1000];
    bool ok = true;

    // ensure that there is not already an sefs of this name
    sprintf(query, "SELECT name FROM sefs WHERE name = '%s'", seName);
    if (db->execute(query)) {
        if (!db->nextRow()) {
            ok = false;
            fprintf(stderr, "There is no such sefs named '%s'\n", seName);
        }
    } 
    else {
        fprintf(stderr, "Could not execute query:\n%s\n", query);
        ok = false;
    }


    VirtDiskList virtDisks;
    // get the list of virtual disks in this sefs
    if (ok) {
        // print sefs name - NOW we're getting somewhere...
        printf("\n%s\n\n", seName);

        sprintf(query,
            "SELECT virt_disk FROM sefs WHERE name = '%s'", seName);
        if (db->execute(query)) {
            while (db->nextRow()) {
                VirtDisk *vd = new VirtDisk();
                strcpy(vd->name, db->column(0));
                virtDisks.push_back(vd);
            }
        }
        else {
            fprintf(stderr,"Could not make query:\n%s\n", query);
            ok = false;
        }
    }


    // got the list of virtual disks, now get the disks they point to
    DiskUsageList diskUsage;
    if (ok) {
        for (int v = 0; ok && (v < virtDisks.size()); v++) {
            VirtDisk *vd = virtDisks[v];
            char *blockSize = NULL;
            bool first = true;

            sprintf(query,
                "SELECT physical_disk,kilobytes,block_size FROM virt_disk WHERE name = '%s'",
                vd->name);
            if (db->execute(query)) {
                while (db->nextRow()) {
                    DiskUsage *du = new DiskUsage();
                    strcpy(du->name, db->column(0));
                    du->usage = atoll(db->column(1));
                    // print the virtual disk info once
                    if (first) {
                        printf("%s %s\n\n", vd->name, db->column(2));
                        first = false;
                    }
                    diskUsage.push_back(du);
                }
            }
            else {
                fprintf(stderr,"Could not make query:\n%s\n", query);
                ok = false;
                break;
            }

            // print each physical disk
            for (int pd = 0; ok && (pd < diskUsage.size()); pd++) {
                DiskUsage *du = diskUsage[pd];
                sprintf(query,
                    "SELECT host,directory FROM physical_disk WHERE name = '%s'",
                    du->name);
                if (db->execute(query)) {
                    if (db->nextRow()) {
                        printf("    %s %s %Ld\n", db->column(0), db->column(1), du->usage);
                    }
                }
                else {
                    fprintf(stderr,"Could get a row from query:\n%s\n", query);
                    ok = false;
                    break;
                }
                delete du;
            }
            printf("\n");
            diskUsage.clear();
        }
    }


    delete db;
    exit (ok ? 0 : 1);
}
@


1.2
log
@Made utility to generate typedefs based on database tables and fields.

Updated files to use and test SEDB.h.

Changed varchar(5000) field to text (in make_db) because
mysql was converting it anyway.
@
text
@@


1.1
log
@Added new file for printing sefs setup.
@
text
@d7 2
a10 1
#include <PolicyUtil.hpp>
@

