head	1.3;
access;
symbols;
locks; strict;
comment	@// @;


1.3
date	2005.05.06.10.21.31;	author rdesai;	state Exp;
branches;
next	1.2;
deltatype	text;
permissions	666;
commitid	9d4427b45114640;
kopt	kv;
filename	@SocketAddress.hpp@;

1.2
date	2005.04.17.00.32.46;	author rdesai;	state Exp;
branches;
next	1.1;
deltatype	text;
permissions	666;
commitid	7544261ae8536eb;
kopt	kv;
filename	@SocketAddress.hpp@;

1.1
date	2005.04.16.21.20.15;	author rdesai;	state Exp;
branches;
next	;
deltatype	text;
permissions	666;
commitid	ac04261817e23e1;
kopt	kv;
filename	@SocketAddress.hpp@;


desc
@@


1.3
log
@Socket code, XDR and timers.
@
text
@#ifndef SocketAddress_h__
#define SocketAddress_h__

#include "Net.hpp"

struct sockaddr;

namespace SynerEdge
{

class SocketAddressException : public SynerEdgeException
{
public:
	SocketAddressException(const std::wstring &msg)
	: SynerEdgeException(msg)
	{}
};

class SocketAddress
{
public:
	SocketAddress(const Host &hst, const Service &service);
	SocketAddress(const Service &serv, bool isBroadcast, bool isIP6);
	SocketAddress(const Protocol &proto, const sockaddr *addr, int addrLen);
	SocketAddress(const SocketAddress &copy);

	SocketAddress &operator=(const SocketAddress &equal);
	~SocketAddress();

	bool operator==(const SocketAddress &equal) const;

	bool isIP6() const;
	bool isBroadcast() const;
	const Protocol &getProtocol() const;
	short getPort() const;

	//const in_addr &getInAddr() const;
	static size_t getSockAddrV4Size();
	//const in6_addr &getIn6Addr() const;
	static size_t getSockAddrV6Size();
	const sockaddr *getSockAddr() const;
	size_t getSockAddrSize() const;

private:
	struct InnerData;
	InnerData &innerData;
};

}

#endif

@


1.2
log
@Can create service not in the /etc/services table.
Can retrieve port and protocol info from SocketAddress.
@
text
@d6 2
d11 8
d24 1
d34 1
a34 2
	const in_addr &getInAddr() const;
	const in6_addr &getIn6Addr() const;
d36 7
@


1.1
log
@Socket address stuff.  Supports IPV6.
@
text
@d22 4
a25 2
	std::string getHostName() const;
	std::string getServiceName() const;
@

