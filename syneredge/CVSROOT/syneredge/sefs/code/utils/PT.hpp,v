head	1.3;
access;
symbols;
locks; strict;
comment	@// @;


1.3
date	2005.06.13.20.52.35;	author gtarcea;	state Exp;
branches;
next	1.2;
deltatype	text;
permissions	666;
commitid	65442adf1ed4226;
kopt	kv;
filename	@PT.hpp@;

1.2
date	2005.04.30.21.17.40;	author gtarcea;	state Exp;
branches;
next	1.1;
deltatype	text;
permissions	666;
commitid	81c4273f5df67b6;
kopt	kv;
filename	@PT.hpp@;

1.1
date	2005.04.26.22.55.55;	author gtarcea;	state Exp;
branches;
next	;
deltatype	text;
permissions	666;
commitid	410426ec6ea7a6e;
kopt	kv;
filename	@PT.hpp@;


desc
@@


1.3
log
@Require #define DO_PT inorder to enable the PT() macro, that way the macro
itself doesn't need to be removed from the code.
@
text
@
#ifndef __PT_INCLUDE_
#define __PT_INCLUDE_

#include <sys/time.h>
#include <time.h>
#include <stdio.h>

#ifdef DO_PT

#define PT(a) { struct timeval t ; gettimeofday(&t, NULL); printf("\n%s:\tTime = %ul:(%ul) threadid = %ul\n", a, t.tv_sec, t.tv_usec, pthread_self()) ; }

#else

#define PT(a)

#endif // DO_PT

#endif // __PT_INCLUDE_
@


1.2
log
@Change #define - Right now I've solved the performance issues (good enough atleast)
@
text
@d9 5
a13 1
//#define PT(a) { struct timeval t ; gettimeofday(&t, NULL); printf("\n%s:\tTime = %ul:(%ul) threadid = %ul\n", a, t.tv_sec, t.tv_usec, pthread_self()) ; }
d16 2
@


1.1
log
@Trace time spent in functions.
@
text
@d9 3
a11 1
#define PT(a) { struct timeval t ; gettimeofday(&t, NULL); printf("\n%s:\tTime = %ul:(%ul) threadid = %ul\n", a, t.tv_sec, t.tv_usec, pthread_self()) ; }
@

