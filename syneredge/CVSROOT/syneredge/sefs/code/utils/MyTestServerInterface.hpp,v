head	1.3;
access;
symbols;
locks; strict;
comment	@// @;


1.3
date	2005.06.12.23.56.00;	author rdesai;	state Exp;
branches;
next	1.2;
deltatype	text;
permissions	666;
commitid	a042accb76008d;
kopt	kv;
filename	@MyTestServerInterface.hpp@;

1.2
date	2005.06.12.21.25.09;	author rdesai;	state Exp;
branches;
next	1.1;
deltatype	text;
permissions	666;
commitid	ad842aca81f0d25;
kopt	kv;
filename	@MyTestServerInterface.hpp@;

1.1
date	2005.06.12.12.00.16;	author rdesai;	state Exp;
branches;
next	;
deltatype	text;
permissions	666;
commitid	ab042ac23b15cb0;
kopt	kv;
filename	@MyTestServerInterface.hpp@;


desc
@@


1.3
log
@Cleanup of orb routines.  Mostly working the way I want now.
@
text
@#ifndef MyTestServerInterface_hh
#define MyTestServerInterface_hh

#include "OrbBase.hpp"

namespace SynerEdge
{

class MyTest_0_1_ServerInterface : public ServerInterface
{
public:
	MyTest_0_1_ServerInterface();
	~MyTest_0_1_ServerInterface() {}

	XdrStream *func1_delegate(Context &ctx, XdrStream &params);
	XdrStream *func2_delegate(Context &ctx, XdrStream &params);

	void func1_srv(const std::wstring &msg, int i);
	std::wstring func2_srv(double d, int i);
};

class MyTest_0_1_ClientInterface : public ClientInterface
{
public:
	MyTest_0_1_ClientInterface(ClientOrb &orb);
	~MyTest_0_1_ClientInterface() {}

	void func1(const std::wstring &msg, int i);
	std::wstring func2(double d, int i);

private:
	ClientOrb &orb;
};

}

#endif

@


1.2
log
@Not completely fixed, but better at least!
@
text
@d25 1
a25 1
	MyTest_0_1_ClientInterface(Context &ctx);
d32 1
a32 1
	Context context;
@


1.1
log
@Cleanup of XDR server code.  Getting closer to parking this.
@
text
@d22 13
@

