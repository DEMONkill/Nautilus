head	1.5;
access;
symbols;
locks; strict;
comment	@// @;


1.5
date	2005.06.13.03.11.00;	author rdesai;	state Exp;
branches;
next	1.4;
deltatype	text;
permissions	666;
commitid	19842acf93715f7;
kopt	kv;
filename	@MyTestServerInterface.cpp@;

1.4
date	2005.06.13.03.08.21;	author rdesai;	state Exp;
branches;
next	1.3;
deltatype	text;
permissions	666;
commitid	d1842acf870136d;
kopt	kv;
filename	@MyTestServerInterface.cpp@;

1.3
date	2005.06.12.23.56.00;	author rdesai;	state Exp;
branches;
next	1.2;
deltatype	text;
permissions	666;
commitid	a042accb76008d;
kopt	kv;
filename	@MyTestServerInterface.cpp@;

1.2
date	2005.06.12.21.25.08;	author rdesai;	state Exp;
branches;
next	1.1;
deltatype	text;
permissions	666;
commitid	ad842aca81f0d25;
kopt	kv;
filename	@MyTestServerInterface.cpp@;

1.1
date	2005.06.12.12.00.16;	author rdesai;	state Exp;
branches;
next	;
deltatype	text;
permissions	666;
commitid	ab042ac23b15cb0;
kopt	kv;
filename	@MyTestServerInterface.cpp@;


desc
@@


1.5
log
@removal of extra debug
@
text
@#include "MyTestServerInterface.hpp"
#include "XdrStream.hpp"

namespace SynerEdge
{

MyTest_0_1_ServerInterface::MyTest_0_1_ServerInterface() : ServerInterface(L"MyTest", L"0_1")
{
	(*this) += new MethodDelegate<MyTest_0_1_ServerInterface>(L"func1", *this, &MyTest_0_1_ServerInterface::func1_delegate);
	(*this) += new MethodDelegate<MyTest_0_1_ServerInterface>(L"func2", *this, &MyTest_0_1_ServerInterface::func2_delegate);

}

XdrStream *MyTest_0_1_ServerInterface::func1_delegate(Context &ctx, XdrStream &params)
{
	XdrStream *result = new XdrStream();
	std::wstring msg;
	int i;

	params >> msg >> i;
	func1_srv(msg, i);
	
	return result;
}


XdrStream *MyTest_0_1_ServerInterface::func2_delegate(Context &ctx, XdrStream &params)
{
	XdrStream *result = new XdrStream();
	double d; 
	int i;
	params >> d >> i;

	std::wstring funcres = func2_srv(d, i);

	(*result) << funcres;
	return result;
}


void MyTest_0_1_ServerInterface::func1_srv(const std::wstring &msg, int i)
{
	std::wcout << L"inside func1_srv: " << msg << L"-" << i << std::endl;
}

std::wstring MyTest_0_1_ServerInterface::func2_srv(double d, int i)
{
	std::wcout << L"inside func2_srv: " << d << L"-" << i << std::endl;
	return L"func2_result";
}


MyTest_0_1_ClientInterface::MyTest_0_1_ClientInterface(ClientOrb &orb)
: orb(orb), ClientInterface(L"MyTest", L"0_1")
{
}

void MyTest_0_1_ClientInterface::func1(const std::wstring &msg, int i)
{
	XdrStream params;
	params << msg << i;

	XdrStream *xdrresult = operator()(L"func1", orb.getContext(), params);

	delete xdrresult;
}

std::wstring MyTest_0_1_ClientInterface::func2(double d, int i)
{
	std::wstring result;
	XdrStream params;
	params << d << i;

	XdrStream *xdrresults = operator()(L"func2", orb.getContext(), params);

	(*xdrresults) >> result;
	delete xdrresults;

	return result;
}

}
@


1.4
log
@More cleanup of Orb routines.  Fixed a bug in return results, also refactored
the ORB stuff.
@
text
@a19 4
	std::wcout << L"Inside of func1, pulling parameters" << std::endl;

	params.reportSize();

a64 2
	std::wcout << "at end of func1" << std::endl;

a74 2

	xdrresults->reportSize();
@


1.3
log
@Cleanup of orb routines.  Mostly working the way I want now.
@
text
@d82 2
@


1.2
log
@Not completely fixed, but better at least!
@
text
@d57 2
a58 2
MyTest_0_1_ClientInterface::MyTest_0_1_ClientInterface(Context &ctx)
: context(ctx), ClientInterface(L"MyTest", L"0_1")
d67 1
a67 1
	XdrStream *xdrresult = operator()(L"func1", context, params);
d80 1
a80 1
	XdrStream *xdrresults = operator()(L"func2", context, params);
@


1.1
log
@Cleanup of XDR server code.  Getting closer to parking this.
@
text
@d57 31
@

