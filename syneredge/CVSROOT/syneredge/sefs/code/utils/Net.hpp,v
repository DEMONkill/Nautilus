head	1.7;
access;
symbols;
locks; strict;
comment	@// @;


1.7
date	2005.05.06.10.21.30;	author rdesai;	state Exp;
branches;
next	1.6;
deltatype	text;
permissions	666;
commitid	9d4427b45114640;
kopt	kv;
filename	@Net.hpp@;

1.6
date	2005.04.20.11.10.26;	author rdesai;	state Exp;
branches;
next	1.5;
deltatype	text;
permissions	666;
commitid	8cc4266388e09a3;
kopt	kv;
filename	@Net.hpp@;

1.5
date	2005.04.19.10.14.56;	author rdesai;	state Exp;
branches;
next	1.4;
deltatype	text;
permissions	666;
commitid	e144264d9e31081;
kopt	kv;
filename	@Net.hpp@;

1.4
date	2005.04.18.02.06.10;	author rdesai;	state Exp;
branches;
next	1.3;
deltatype	text;
permissions	666;
commitid	4b04263159d4b92;
kopt	kv;
filename	@Net.hpp@;

1.3
date	2005.04.17.00.32.46;	author rdesai;	state Exp;
branches;
next	1.2;
deltatype	text;
permissions	666;
commitid	7544261ae8536eb;
kopt	kv;
filename	@Net.hpp@;

1.2
date	2005.04.16.21.53.28;	author rdesai;	state Exp;
branches;
next	1.1;
deltatype	text;
permissions	666;
commitid	bc8426189353d13;
kopt	kv;
filename	@Net.hpp@;

1.1
date	2005.04.16.18.46.24;	author rdesai;	state Exp;
branches;
next	;
deltatype	text;
permissions	666;
commitid	2fc42615d612df3;
kopt	kv;
filename	@Net.hpp@;


desc
@@


1.7
log
@Socket code, XDR and timers.
@
text
@#ifndef SynerEdge_Net_h__
#define SynerEdge_Net_h__

#include "SynerEdge.hpp"
#include "DateTime.hpp"

#include <string>
#include <list>

struct in_addr;
struct in6_addr;

namespace SynerEdge
{

class NetException : public SynerEdgeException
{
public:
	NetException(const std::wstring &msg) : SynerEdgeException(msg) {}
	virtual ~NetException() {}
};

class IPAddress
{
public:
	IPAddress(const std::wstring &ipAddrString, bool isIP6);
	IPAddress(const std::wstring &ipAddrString);
	IPAddress(const in_addr  &in);
	IPAddress(const in6_addr  &in);
	IPAddress(const IPAddress &copy);

	IPAddress &operator=(const IPAddress &equal);

	virtual ~IPAddress();
	bool operator==(const IPAddress &RHS) const;

	bool isIP6() const;
	const std::wstring &toString() const;
	const in_addr &getInAddr() const;
	const in6_addr &getIn6Addr() const;

private:
	struct InnerData;

	InnerData &innerData;
};

class Host
{
public:
	typedef std::list<std::wstring>::const_iterator AliasItor;
	typedef std::list<IPAddress>::const_iterator AddressItor;

	Host(const IPAddress &);
	Host(const std::wstring &ipOrHostName, bool isIP6);
	Host(const Host &copy);
	Host();

	virtual ~Host();
	Host &operator=(const Host &copy);

	IPAddress getIP() const;
	const std::wstring &getName() const;
	bool isIP6() const;
	DateTime getTimeStamp() const;

	const std::list<std::wstring> &getAliases() const;
	const std::list<IPAddress> &getAddresses() const;

	bool operator==(const Host &RHS) const;
private:
	struct InnerData;

	InnerData &innerData;
};

class Protocol
{
public:
	typedef std::list<std::wstring>::const_iterator AliasItor;

	Protocol(const std::wstring &protoname);
	Protocol(int number);
	Protocol(const Protocol &copy);

	virtual ~Protocol();
	Protocol &operator=(const Protocol &equal);

	const std::list<std::wstring> &getAliases() const;
	const std::wstring &getName() const;
	int getNumber() const;
	int getType() const;

	bool operator==(const Protocol &RHS) const;
private:
	struct InnerData;

	InnerData &innerData;
};

class Service
{
public:
	typedef std::list<std::wstring>::const_iterator AliasItor;

	Service(const std::wstring &servicename, const Protocol &proto);
	Service(short port, const Protocol &proto);
	Service(const Service &copy);

	Service &operator=(const Service &equal);
	virtual ~Service();

	const std::wstring &getName() const;
	short getPort() const;
	const Protocol &getProtocol() const;
	const std::list<std::wstring> &getAliases() const;

	bool operator==(const Service &RHS) const;
private:
	struct InnerData;

	InnerData &innerData;
};

}

#endif

@


1.6
log
@Added date time stamp to host name so I can use it in expiry
@
text
@d106 2
a107 2
	Service(const std::wstring &servicename, const std::wstring &protoname);
	Service(short port, const std::wstring &protoname);
d115 1
a115 1
	const std::wstring &getProtocol() const;
@


1.5
log
@Cleaned up Protocols to return the type of the socket (dgram or stream)
Added HostCache algorithm - right now cache is only cleared in response to
SIGHUP.
@
text
@d5 2
d65 1
@


1.4
log
@Update Net functions (and test functions) to be wide-string enabled.
All of these functions now store and return wide strings.
@
text
@d89 1
@


1.3
log
@Can create service not in the /etc/services table.
Can retrieve port and protocol info from SocketAddress.
@
text
@d24 2
a25 2
	IPAddress(const std::string &ipAddrString, bool isIP6);
	IPAddress(const std::string &ipAddrString);
d36 1
a36 1
	const std::string &toString() const;
d49 1
a49 1
	typedef std::list<std::string>::const_iterator AliasItor;
d53 1
a53 1
	Host(const std::string &ipOrHostName, bool isIP6);
d61 1
a61 1
	const std::string &getName() const;
d64 1
a64 1
	const std::list<std::string> &getAliases() const;
d77 1
a77 1
	typedef std::list<std::string>::const_iterator AliasItor;
d79 1
a79 1
	Protocol(const std::string &protoname);
d86 2
a87 2
	const std::list<std::string> &getAliases() const;
	const std::string &getName() const;
d100 1
a100 1
	typedef std::list<std::string>::const_iterator AliasItor;
d102 2
a103 2
	Service(const std::string &servicename, const std::string &protoname);
	Service(short port, const std::string &protoname);
d109 1
a109 1
	const std::string &getName() const;
d111 2
a112 2
	const std::string &getProtocol() const;
	const std::list<std::string> &getAliases() const;
@


1.2
log
@Cleaned Service (made port a short)
added test program
@
text
@d36 1
a36 1
	std::string toString() const;
d49 3
d61 1
a61 1
	std::string getName() const;
d64 2
a65 2
	std::list<std::string> getAliases() const;
	std::list<IPAddress> getAddresses() const;
d77 2
d86 2
a87 2
	std::list<std::string> getAliases() const;
	std::string getName() const;
d100 3
a102 1
	Service(const std::string &hostname, const std::string &protoname);
d109 1
a109 1
	std::string getName() const;
d111 2
a112 2
	std::string getProtocol() const;
	std::list<std::string> getAliases() const;
@


1.1
log
@Service, Host, Protocol, and IPAddress functions.
IPv6 enabled
@
text
@d96 1
a96 1
	Service(int port, const std::string &protoname);
d103 1
a103 1
	int getPort() const;
@

