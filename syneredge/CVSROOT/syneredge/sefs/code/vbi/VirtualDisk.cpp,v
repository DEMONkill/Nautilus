head	1.6;
access;
symbols;
locks; strict;
comment	@// @;


1.6
date	2005.06.12.23.18.33;	author aprakash;	state Exp;
branches;
next	1.5;
deltatype	text;
permissions	666;
commitid	93842acc2986398;
kopt	kv;
filename	@VirtualDisk.cpp@;

1.5
date	2005.06.10.15.59.03;	author aprakash;	state Exp;
branches;
next	1.4;
deltatype	text;
permissions	666;
commitid	fbc42a9b89c7706;
kopt	kv;
filename	@VirtualDisk.cpp@;

1.4
date	2005.06.09.16.51.28;	author aprakash;	state Exp;
branches;
next	1.3;
deltatype	text;
permissions	666;
commitid	ce842a873275038;
kopt	kv;
filename	@VirtualDisk.cpp@;

1.3
date	2005.06.07.02.13.43;	author aprakash;	state Exp;
branches;
next	1.2;
deltatype	text;
permissions	666;
commitid	6d042a5029c14bd;
kopt	kv;
filename	@VirtualDisk.cpp@;

1.2
date	2005.05.10.16.12.44;	author gtarcea;	state Exp;
branches;
next	1.1;
deltatype	text;
permissions	666;
commitid	53c4280dd310af8;
kopt	kv;
filename	@VirtualDisk.cpp@;

1.1
date	2005.04.30.21.13.32;	author gtarcea;	state Exp;
branches;
next	;
deltatype	text;
permissions	666;
commitid	fe44273f4e56486;
kopt	kv;
filename	@VirtualDisk.cpp@;


desc
@@


1.6
log
@Some bug fixes.

isOpen wasn't correctly being maintained/used.

Also, modified the constructor so that bflist argument is not passsed by value
(it is a list).
@
text
@#include "VirtualDisk.hpp"

/* 
 * Author: Glenn Tarcea
 * Modified by: Atul Prakash to add caching functionality.
 */

namespace SynerEdge {

VirtualDisk::VirtualDisk(string name, int blocksize, VirtualBlockFileList &vbfilelist)
	: name(name), blocksize(blocksize),isopen(false),
		blockonwrite(false)
{
	useCache = true;           // For debugging. To diskable cache use, set to false.
	blockcache = new BlockCacheStd(this, cachesize, blocksize);
	for (VirtualBlockFileListIterator itor = vbfilelist.begin() ;
			itor != vbfilelist.end() ; itor++) {
		vbflist.push_back(*itor);
	}
}

VirtualDisk::~VirtualDisk()
{
}


bool
VirtualDisk::open()
{
	if (isopen) return true;
	for (VirtualBlockFileListIterator itor = vbflist.begin() ;
			itor != vbflist.end() ; itor++) {
		bool opened = (*itor)->open() ;
		if (! opened) {
			return false ;
		}

		int bfblocksize = (*itor)->getBlockSize() ;
		if (bfblocksize != blocksize) {
			return false ;
		}
	}

	isopen = true ;

	return true ;
}

bool 
VirtualDisk::close()
{
	if (! isopen) {
		return true ;
	}

	for (VirtualBlockFileListIterator itor = vbflist.begin() ;
			itor != vbflist.end() ; itor++) {
		(*itor)->close() ;
	}
	isopen = false;

	return true ;
}

uint64 
VirtualDisk::getNumBlocks()
{
	VirtualBlockFileListIterator itor = vbflist.begin() ;

	return (*itor)->getNumBlocks() ;
}

uint64 
VirtualDisk::getNumFreeBlocks()
{
	VirtualBlockFileListIterator itor = vbflist.begin() ;
	uint64 returnval = (*itor)->getNumFreeBlocks() ;
	return returnval;
}

uint64 
VirtualDisk::getFreeBlock()
{
	VirtualBlockFileListIterator itor = vbflist.begin() ;

	return (*itor)->getFreeBlock() ; // How do we allocate blocks across mirrors?
}

//
// For the moment lets assume all operations succeed
//

#define DO_OPERATION(a) \
        for ( VirtualBlockFileListIterator itor = vbflist.begin() ; \
                        itor != vbflist.end() ; itor++) {\
		(*itor)->a ; \
	}


bool 
VirtualDisk::disk_releaseBlock(uint64 blocknum)
{
	DO_OPERATION(releaseBlock(blocknum))

	return true ;
}

bool 
VirtualDisk::flushFreeBlockList()
{
	DO_OPERATION(flushFreeBlockList())

	return true ;
}

int 
VirtualDisk::getBlockSize() const
{
	return blocksize ;
}



bool 
VirtualDisk::writeBlock(uint64 blocknum, int offset, int size, char *data)
{
	if (useCache) {
		return blockcache->writeBlock(blocknum, offset, size, data);
	} else {
		return disk_writeBlock(blocknum, offset, size, data);
	}
}

bool VirtualDisk::writeBlock(Block &block)
{
	if (useCache) {
		return blockcache->writeBlock(block);
	} else {
		return disk_writeBlock(block);
	}
}

bool VirtualDisk::readBlock(uint64 blocknum, Block &block)
{
	if (useCache) {
		return blockcache->readBlock(blocknum, block);
	} else {
		return disk_readBlock(blocknum, block);
	}
}

bool 
VirtualDisk::zeroBlock(uint64 blocknum)
{

	if (useCache) {
		return blockcache->zeroBlock(blocknum);
	} else {
		return disk_zeroBlock(blocknum);
	}
}

bool
VirtualDisk::validateAccess(uint64 blocknum)
{

	if (blocknum <= 0 || blocknum > getNumBlocks())
		return false;
	else return true;
}

bool 
VirtualDisk::releaseBlock(uint64 blocknum)
{
	if (!validateAccess(blocknum)) {
		return false;
	}

	if (useCache) {
		return blockcache->releaseBlock(blocknum);
	} else {
		return disk_releaseBlock(blocknum);
	}
}

bool 
VirtualDisk::disk_writeBlock(uint64 blocknum, int offset, int size, char *data)
{
	DO_OPERATION(writeBlock(blocknum,offset,size,data))

	return true ;
}

bool 
VirtualDisk::disk_writeBlock(Block &block)
{
	DO_OPERATION(writeBlock(block))

	return true ;
}

bool 
VirtualDisk::disk_readBlock(uint64 blocknum, Block &block)
{
        for ( VirtualBlockFileListIterator itor = vbflist.begin() ;
                        itor != vbflist.end() ; itor++) {
		bool status = (*itor)->readBlock(blocknum, block) ; 
		if (status) {
			return true ;
		}
	}

	return false ;
}

bool 
VirtualDisk::disk_zeroBlock(uint64 blocknum)
{
	DO_OPERATION(zeroBlock(blocknum))

	return true ;
}

void 
VirtualDisk::setMirrorBlocking(bool blockonwrite)
{
	this->blockonwrite = blockonwrite ;
}

bool 
VirtualDisk::getMirrorBlocking()
{
	return blockonwrite ;
}

bool 
VirtualDisk::repair()
{
	return false ;
}

} // namespace SynerEdge
@


1.5
log
@NOTES: this is where I am keeping track of "bugs" and TODO work.

Other files: Bug fixes to help pass the tests.
@
text
@d10 2
a11 2
VirtualDisk::VirtualDisk(string name, int blocksize, VirtualBlockFileList vbflist)
	: name(name), blocksize(blocksize),vbflist(vbflist),isopen(false),
d16 4
d30 1
d60 1
@


1.4
log
@*** empty log message ***
@
text
@d157 9
d169 4
@


1.3
log
@This version of block cache uses LRU policy.

Writing back to disk is currently missing. Also, limits on cache size are not currently enforced.
@
text
@d1 1
d3 4
a6 1
#include "VirtualDisk.hpp"
d71 2
a72 1
	return (*itor)->getNumFreeBlocks() ;
d95 1
a95 1
VirtualDisk::releaseBlock(uint64 blocknum)
d158 1
a158 1
VirtualDisk::freeBlock(uint64 blocknum)
d161 1
a161 1
		return blockcache->freeBlock(blocknum);
d163 1
a163 1
		return disk_freeBlock(blocknum);
a200 8

	return true ;
}

bool 
VirtualDisk::disk_freeBlock(uint64 blocknum)
{
	DO_OPERATION(freeBlock(blocknum))
@


1.2
log
@First functional version of VirtualDisk class. The mirroring in this
version is very simple. It always writes to all mirrors, on read it returns
from the first successful read. The class assumes that the VirtualBlockFiles
passed into it are all the same size.
@
text
@d10 2
d18 1
d111 2
d116 49
d171 1
a171 1
VirtualDisk::writeBlock(Block &block)
d179 1
a179 1
VirtualDisk::readBlock(uint64 blocknum, Block &block)
d193 1
a193 1
VirtualDisk::zeroBlock(uint64 blocknum)
d201 1
a201 1
VirtualDisk::freeBlock(uint64 blocknum)
@


1.1
log
@Add interface to multiple blockfiles. Begin to work on a virtual disk interface.
@
text
@d6 3
a8 3
VirtualDisk::VirtualDisk(string name, int blocksize) 
//		: name(name), blocksize(blocksize), startingblocknum(1),
//		  endingblocknum(0)
d16 21
d38 1
a38 1
VirtualDisk::addDiskBlocks(string blockfile)
d40 2
a41 4
/*
	BlockFile *bf = new BlockFile(blockfile) ;
	if (! bf->open()) {
		return false ;
d44 3
a46 3
	if (bf->getBlockSize() != blocksize) {
		delete bf ;
		return false ;
d49 22
a70 1
	uint64 numblocks = bf->getNumBlocks() ;
d72 2
a73 1
	endingblocknum = startingblocknum + numblocks ;
d75 9
a83 1
	BlockMapEntry entry(bf, startingblocknum, endingblocknum) ;
a84 1
	startingblocknum = endingblocknum + 1 ;
d86 4
a89 1
	blockMap[blockfile] = entry ;
a91 1
*/
d94 32
a125 2
bool
VirtualDisk::entryExists(string blockfile)
d127 6
a132 4
/*
	BlockMapIterator itor = blockMap.find(blockfile);
	if (itor != blockMap.end()) {
		return true ;
d134 1
a135 1
*/
d139 1
a139 1
VirtualDisk::removeDiskBlocks(string blockfile)
d141 18
a158 6
	// Should we be using boost::smart_ptr here?
/*
	if (entryExists(blockfile)) {
		blockMap.erase(blockfile) ;
		return true ;
	}
d160 4
a163 2
	return false ;
*/
d169 1
a169 1
//	return false ;
@

