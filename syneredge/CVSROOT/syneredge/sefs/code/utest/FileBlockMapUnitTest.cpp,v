head	1.4;
access;
symbols;
locks; strict;
comment	@// @;


1.4
date	2005.06.09.17.02.37;	author aprakash;	state Exp;
branches;
next	1.3;
deltatype	text;
permissions	666;
commitid	98042a875f55961;
kopt	kv;
filename	@FileBlockMapUnitTest.cpp@;

1.3
date	2005.05.01.21.58.21;	author gtarcea;	state Exp;
branches;
next	1.2;
deltatype	text;
permissions	666;
commitid	ff8427550e854fc;
kopt	kv;
filename	@FileBlockMapUnitTest.cpp@;

1.2
date	2005.04.22.18.43.09;	author gtarcea;	state Exp;
branches;
next	1.1;
deltatype	text;
permissions	666;
commitid	a80426945b0007d;
kopt	kv;
filename	@FileBlockMapUnitTest.cpp@;

1.1
date	2005.04.21.17.04.03;	author gtarcea;	state Exp;
branches;
next	;
deltatype	text;
permissions	666;
commitid	3b44267dce5664a;
kopt	kv;
filename	@FileBlockMapUnitTest.cpp@;


desc
@@


1.4
log
@These are partially converted tests. Many will break because of the changes
to how readBlock and writeBlock behave -- they will fail if blocks are
not allocated.

testOrder.cpp controls the order of tests.
@
text
@#include "FileBlockMapUnitTest.hpp"
#include "FileBlockMap.hpp"
#include <iostream>
using namespace std ;
using namespace SynerEdge ;

// CPPUNIT_TEST_SUITE_REGISTRATION(FileBlockMapUnitTest) ;

void
FileBlockMapUnitTest::setUp()
{
}

void
FileBlockMapUnitTest::tearDown()
{
}

void
FileBlockMapUnitTest::testConstructor()
{
//	cout << "FileBlockMapUnitTest::testConstructor()" << endl ;
	system("rm -f /etc/syneredge/fbmap/passwd") ;
	FileBlockMap fb("/etc/syneredge/fbmap/passwd") ;
	FileBlockMap *fbp = new FileBlockMap("/etc/syneredge/fbmap/passwd2") ;
}

void
FileBlockMapUnitTest::testBlockMethods()
{
	//cout << "FileBlockMapUnitTest::testBlockMethods()" << endl ;
	FileBlockMap fb("/etc/syneredge/fbmap/passwd") ;
	CPPUNIT_ASSERT(fb.getBlockCount() == 0) ;
	CPPUNIT_ASSERT(fb.addBlock(100, 100) == true) ;
	CPPUNIT_ASSERT(fb.getBlockByteCount(100) == 100) ;
	CPPUNIT_ASSERT(fb.blockExists(100) == true) ;
	CPPUNIT_ASSERT(fb.blockExists(101) == false) ;
	CPPUNIT_ASSERT(fb.getBlockCount() == 1) ;
	CPPUNIT_ASSERT(fb.removeBlock(101) == false) ;
	CPPUNIT_ASSERT(fb.getBlockCount() == 1) ;
	CPPUNIT_ASSERT(fb.removeBlock(100) == true) ;
	CPPUNIT_ASSERT(fb.blockExists(100) == false) ;
	CPPUNIT_ASSERT(fb.getBlockByteCount(100) == -1) ;
	CPPUNIT_ASSERT(fb.getBlockCount() == 0) ;
	CPPUNIT_ASSERT(fb.updateBlock(100, 4) == false) ;
	CPPUNIT_ASSERT(fb.getBlockByteCount(100) == -1) ;
	CPPUNIT_ASSERT(fb.blockExists(100) == false) ;
	CPPUNIT_ASSERT(fb.getBlockCount() == 0) ;
	CPPUNIT_ASSERT(fb.addBlock(100, 100) == true) ;
	CPPUNIT_ASSERT(fb.getByteCount() == 100) ;
	CPPUNIT_ASSERT(fb.updateBlock(100, 4) == true) ;
	CPPUNIT_ASSERT(fb.getBlockByteCount(100) == 4) ;
	CPPUNIT_ASSERT(fb.blockExists(100) == true) ;
	CPPUNIT_ASSERT(fb.getBlockCount() == 1) ;
	CPPUNIT_ASSERT(fb.getByteCount() == 4) ;
	CPPUNIT_ASSERT(fb.getBlockNumAt(1) == 100) ;
	CPPUNIT_ASSERT(fb.getBlockNumAt(2) == 0) ;
}

void
FileBlockMapUnitTest::testHostMethods()
{
	//cout << "FileBlockMapUnitTest::testHostMethods()" << endl ;

	FileBlockMap fb("/etc/syneredge/fbmap/passwd") ;

	CPPUNIT_ASSERT(fb.hostExists("nosuchhost") == false) ;
	CPPUNIT_ASSERT(fb.addHost("spelljammer") == true) ;
	CPPUNIT_ASSERT(fb.hostExists("spelljammer") == true) ;
	CPPUNIT_ASSERT(fb.hostExists("nosuchhost") == false) ;
	CPPUNIT_ASSERT(fb.removeHost("spelljammer") == true) ;
	CPPUNIT_ASSERT(fb.hostExists("spelljammer") == false) ;
	CPPUNIT_ASSERT(fb.removeHost("nosuchhost") == false) ;
}

void
FileBlockMapUnitTest::testOtherMethods()
{
	//cout << "FileBlockMapUnitTest::testOtherMethods()" << endl ;

	CPPUNIT_ASSERT(FileBlockMap::exists("/tmp/nosuchfile") == false) ;
	CPPUNIT_ASSERT(FileBlockMap::exists("/etc/passwd") == true) ;
}
@


1.3
log
@Removed cout of unit function tests
@
text
@d7 1
a7 1
CPPUNIT_TEST_SUITE_REGISTRATION(FileBlockMapUnitTest) ;
@


1.2
log
@Updated unit tests
@
text
@d22 1
a22 1
	cout << "FileBlockMapUnitTest::testConstructor()" << endl ;
d31 1
a31 1
	cout << "FileBlockMapUnitTest::testBlockMethods()" << endl ;
d63 1
a63 1
	cout << "FileBlockMapUnitTest::testHostMethods()" << endl ;
d79 1
a79 1
	cout << "FileBlockMapUnitTest::testOtherMethods()" << endl ;
@


1.1
log
@Moved Unit Tests to utest directory. Renamed all UnitTests to include "UnitTest" in the
name of the file and the class.
@
text
@d35 3
d42 2
d46 2
d52 2
@

