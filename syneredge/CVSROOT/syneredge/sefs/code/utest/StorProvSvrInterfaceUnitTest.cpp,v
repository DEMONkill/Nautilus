head	1.4;
access;
symbols;
locks; strict;
comment	@// @;


1.4
date	2005.06.10.18.01.10;	author gtarcea;	state Exp;
branches;
next	1.3;
deltatype	text;
permissions	666;
commitid	abc42a9d55a54e3;
kopt	kv;
filename	@StorProvSvrInterfaceUnitTest.cpp@;

1.3
date	2005.06.09.17.02.38;	author aprakash;	state Exp;
branches;
next	1.2;
deltatype	text;
permissions	666;
commitid	98042a875f55961;
kopt	kv;
filename	@StorProvSvrInterfaceUnitTest.cpp@;

1.2
date	2005.06.01.19.20.28;	author gtarcea;	state Exp;
branches;
next	1.1;
deltatype	text;
permissions	666;
commitid	948429e0a705262;
kopt	kv;
filename	@StorProvSvrInterfaceUnitTest.cpp@;

1.1
date	2005.05.31.18.34.50;	author gtarcea;	state Exp;
branches;
next	;
deltatype	text;
permissions	666;
commitid	40c429cae306125;
kopt	kv;
filename	@StorProvSvrInterfaceUnitTest.cpp@;


desc
@@


1.4
log
@Working version of unit test
@
text
@#include "StorProvSvrInterfaceUnitTest.hpp"
#include "StorProvSvrInterface.hpp"
#include <iostream>
using namespace std ;
using namespace SynerEdge ;

// CPPUNIT_TEST_SUITE_REGISTRATION(StorProvSvrInterfaceUnitTest) ;

void
StorProvSvrInterfaceUnitTest::setUp()
{
	bf = new BlockFile("/tmp/bf") ;

	if (! bf->open()) {
		bf->create(1, 100, 1024) ;
		CPPUNIT_ASSERT(bf->open() == true) ;
	}
}

void
StorProvSvrInterfaceUnitTest::tearDown()
{
	delete bf ;
}

void 
StorProvSvrInterfaceUnitTest::testConstructor()
{
	StorProvSvrInterface spi((*bf)) ;
	Context ctx ;
	XdrStream xd ;
	int64 numblocks ;
	XdrStream *xdresult = spi.getNumBlocks(ctx, xd) ;
	(*xdresult) >> numblocks ;
	CPPUNIT_ASSERT(numblocks == 100) ;
}

void 
StorProvSvrInterfaceUnitTest::testGets()
{
	StorProvSvrInterface spi((*bf)) ;
	Context ctx ;
	XdrStream xd ;
	int64 numblocks ;

	XdrStream *xdresult = spi.getNumBlocks(ctx, xd) ;
	(*xdresult) >> numblocks ;
	CPPUNIT_ASSERT(numblocks == 100) ;
	delete xdresult ;

	xdresult = spi.getBlockSize(ctx, xd) ;
	int blocksize ;
	(*xdresult) >> blocksize ;
	CPPUNIT_ASSERT(blocksize == 1024) ;
	delete xdresult ;

	xdresult = spi.getNumFreeBlocks(ctx, xd) ;
	(*xdresult) >> numblocks ;
	CPPUNIT_ASSERT(numblocks == 100) ;
	delete xdresult ;

	xdresult = spi.getFreeBlock(ctx, xd) ;
	int64 blocknum ;
	(*xdresult) >> blocknum ;
	CPPUNIT_ASSERT(blocknum == 1) ;
	XdrStream *xdresult2 = spi.getNumFreeBlocks(ctx, xd) ;
	(*xdresult2) >> numblocks ;
	CPPUNIT_ASSERT(numblocks == 99) ;
	delete xdresult ;
	delete xdresult2 ;

	InvokeRequest ir ;
	ir.parameters << blocknum ;
	XdrStream xd2 ;
	xd2 << ir ;
	InvokeRequest ir2 ;
	xd2 >> ir2 ;

	xdresult = spi.releaseBlock(ctx, ir2.parameters) ;
	bool rc ;
	(*xdresult) >> rc ;
	CPPUNIT_ASSERT(rc == true) ;
	delete xdresult ;

	xdresult = spi.getNumFreeBlocks(ctx, xd) ;
	(*xdresult) >> numblocks ;
	CPPUNIT_ASSERT(numblocks == 100) ;
	delete xdresult ;
}

void
StorProvSvrInterfaceUnitTest::testReadWrite()
{
	StorProvSvrInterface spi((*bf)) ;
	Context ctx ;
	XdrStream xd ;
	InvokeRequest ir; // Need to build this as this is how we will
			// receive requests in the server.
	XdrStream *xdresult = spi.getFreeBlock(ctx, xd) ;
	uint64 blocknum ;
	(*xdresult) >> blocknum ;
	CPPUNIT_ASSERT(blocknum != 0) ;
	delete xdresult ;

	int offset = 0 ;
	string data = "abc123" ;
	int size = data.size() ;
	ir.parameters << blocknum << offset << size << data ;
	XdrStream xd2 ;
	xd2 << ir ;
	InvokeRequest ir2 ;
	xd2 >> ir2 ;
	xdresult = spi.writeBlock(ctx, ir2.parameters) ;
	bool rc ;
	(*xdresult) >> rc ;
	CPPUNIT_ASSERT(rc == true) ;
	delete xdresult ;

	InvokeRequest ir3 ;
	ir3.parameters << blocknum ;
	XdrStream xd3 ;
	xd3 << ir3 ;
	xd3 >> ir2 ;
	xdresult = spi.readBlock(ctx, ir2.parameters) ;
	(*xdresult) >> rc ;
	uint64 blocknumback ;
	(*xdresult) >> blocknumback ;
	int numbytes ;
        (*xdresult) >> numbytes ;
        (*xdresult) >> size ;
	string data2 ;
        (*xdresult) >> data2 ;
	CPPUNIT_ASSERT(data2 == "abc123") ;
	CPPUNIT_ASSERT(blocknumback == blocknum) ;
	CPPUNIT_ASSERT(rc == true) ;

	InvokeRequest newir ;
	newir.parameters << blocknum ;
	InvokeRequest ir4 ;
	XdrStream xd4 ;
	xd4 << newir ;
	xd4 >> ir4 ;
	xdresult = spi.zeroBlock(ctx, ir4.parameters) ;
	(*xdresult) >> rc ;
	CPPUNIT_ASSERT(rc == true) ;
	delete xdresult ;

	InvokeRequest anewir ;
	anewir.parameters << blocknum ;
	InvokeRequest ir5 ;
	xd2 << anewir ;
	xd2 >> ir5 ;
	xdresult = spi.readBlock(ctx, ir5.parameters) ;
	(*xdresult) >> rc ;
	(*xdresult) >> blocknum ;
        (*xdresult) >> numbytes ;
        (*xdresult) >> size ;
        (*xdresult) >> data2 ;
	CPPUNIT_ASSERT(numbytes == 0) ;
	CPPUNIT_ASSERT(size == 1024) ;
}

void
StorProvSvrInterfaceUnitTest::testOther()
{
	StorProvSvrInterface spi((*bf)) ;
	Context ctx ;
	XdrStream xd ;
	InvokeRequest ir; // Need to build this as this is how we will
			// receive requests in the server.
	
	bool rc ;
	XdrStream *xdresult = spi.flushFreeBlockList(ctx, xd) ;
	(*xdresult) >> rc ;
	CPPUNIT_ASSERT(rc == true) ;
	delete xdresult ;

	system("rm -f /tmp/bf*") ;
}
@


1.3
log
@These are partially converted tests. Many will break because of the changes
to how readBlock and writeBlock behave -- they will fail if blocks are
not allocated.

testOrder.cpp controls the order of tests.
@
text
@d99 6
a104 1
	int64 blocknum = 4 ;
d113 1
a113 1
	XdrStream *xdresult = spi.writeBlock(ctx, ir2.parameters) ;
a119 1
	blocknum = 4 ;
d126 2
a127 3
	(*xdresult) >> blocknum ;
	bool isfree ;
        (*xdresult) >>  isfree ;
d134 11
a144 1
	CPPUNIT_ASSERT(blocknum == 4) ;
d146 15
a176 31

	int64 blocknum ;
	blocknum = 4 ;
	ir.parameters << blocknum ;
	InvokeRequest ir2 ;
	XdrStream xd2 ;
	xd2 << ir ;
	xd2 >> ir2 ;
	xdresult = spi.zeroBlock(ctx, ir2.parameters) ;
	(*xdresult) >> rc ;
	CPPUNIT_ASSERT(rc == true) ;
	delete xdresult ;

	InvokeRequest ir3 ;
	blocknum = 4 ;
	ir2.parameters << blocknum ;
	xd2 << ir3 ;
	xd2 >> ir2 ;
	xdresult = spi.readBlock(ctx, ir2.parameters) ;
	(*xdresult) >> rc ;
	(*xdresult) >> blocknum ;
	bool isfree ;
        (*xdresult) >>  isfree ;
	int numbytes ;
        (*xdresult) >> numbytes ;
	int size ;
        (*xdresult) >> size ;
	string data2 ;
        (*xdresult) >> data2 ;
	CPPUNIT_ASSERT(numbytes == 0) ;
	CPPUNIT_ASSERT(size == 1024) ;
@


1.2
log
@Add test for getBlockSize() call.
@
text
@d7 1
a7 1
CPPUNIT_TEST_SUITE_REGISTRATION(StorProvSvrInterfaceUnitTest) ;
@


1.1
log
@Rename StorageProviderServerInterfaceUnitTest to StorProvSvrInterfaceUnitTest
@
text
@d51 6
@

