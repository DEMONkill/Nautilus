head	1.15;
access;
symbols;
locks; strict;
comment	@// @;


1.15
date	2005.06.12.01.39.03;	author gtarcea;	state Exp;
branches;
next	1.14;
deltatype	text;
permissions	666;
commitid	76442ab91ef00b4;
kopt	kv;
filename	@BlockFile.cpp@;

1.14
date	2005.06.10.02.55.42;	author aprakash;	state Exp;
branches;
next	1.13;
deltatype	text;
permissions	666;
commitid	39442a901251fe8;
kopt	kv;
filename	@BlockFile.cpp@;

1.13
date	2005.06.09.21.35.55;	author aprakash;	state Exp;
branches;
next	1.12;
deltatype	text;
permissions	666;
commitid	46442a8b6282b07;
kopt	kv;
filename	@BlockFile.cpp@;

1.12
date	2005.06.09.16.49.02;	author aprakash;	state Exp;
branches;
next	1.11;
deltatype	text;
permissions	666;
commitid	f2442a8723e4d3f;
kopt	kv;
filename	@BlockFile.cpp@;

1.11
date	2005.05.10.16.14.10;	author gtarcea;	state Exp;
branches;
next	1.10;
deltatype	text;
permissions	666;
commitid	a3c4280ddb40ca3;
kopt	kv;
filename	@BlockFile.cpp@;

1.10
date	2005.04.30.21.19.23;	author gtarcea;	state Exp;
branches;
next	1.9;
deltatype	text;
permissions	666;
commitid	80c4273f63d68e9;
kopt	kv;
filename	@BlockFile.cpp@;

1.9
date	2005.04.27.21.38.39;	author gtarcea;	state Exp;
branches;
next	1.8;
deltatype	text;
permissions	666;
commitid	ecc4270064e0d6d;
kopt	kv;
filename	@BlockFile.cpp@;

1.8
date	2005.04.26.22.56.12;	author gtarcea;	state Exp;
branches;
next	1.7;
deltatype	text;
permissions	666;
commitid	eb4426ec6fe7aaf;
kopt	kv;
filename	@BlockFile.cpp@;

1.7
date	2005.04.26.17.37.41;	author gtarcea;	state Exp;
branches;
next	1.6;
deltatype	text;
permissions	666;
commitid	9d4426e7c4206a2;
kopt	kv;
filename	@BlockFile.cpp@;

1.6
date	2005.04.25.23.20.24;	author gtarcea;	state Exp;
branches;
next	1.5;
deltatype	text;
permissions	666;
commitid	76c426d7b263f06;
kopt	kv;
filename	@BlockFile.cpp@;

1.5
date	2005.04.21.16.48.36;	author gtarcea;	state Exp;
branches;
next	1.4;
deltatype	text;
permissions	666;
commitid	2fc4267d9355a40;
kopt	kv;
filename	@BlockFile.cpp@;

1.4
date	2005.04.19.20.55.54;	author gtarcea;	state Exp;
branches;
next	1.3;
deltatype	text;
permissions	666;
commitid	498426570457b97;
kopt	kv;
filename	@BlockFile.cpp@;

1.3
date	2005.04.15.15.24.28;	author gtarcea;	state Exp;
branches;
next	1.2;
deltatype	text;
permissions	666;
commitid	894425fdc084391;
kopt	kv;
filename	@BlockFile.cpp@;

1.2
date	2005.04.14.21.04.21;	author gtarcea;	state Exp;
branches;
next	1.1;
deltatype	text;
permissions	666;
commitid	728425edab37b3a;
kopt	kv;
filename	@BlockFile.cpp@;

1.1
date	2005.04.12.23.22.15;	author gtarcea;	state Exp;
branches;
next	;
deltatype	text;
permissions	666;
commitid	da0425c57f4484a;
kopt	kv;
filename	@BlockFile.cpp@;


desc
@@


1.15
log
@
Move BlockFileBase.hpp to iBlockIO.hpp
Cleaned up interfaces to support uint64 rather than int64
VirtualDisk and VirtualBlockFile now also inherit from iBlockIO, so now
BlockFileIO can use any of these interfaces.
@
text
@#include <iostream>
#include "BlockFile.hpp"
#include "Block.hpp"
#include "SynerEdge.hpp"
#include "seerror.hpp"
#include "PT.hpp"
#include "boost/filesystem/operations.hpp"
/*#include "blockcache.h"*/
#include <string>
#include <cstdlib>

using namespace std ;

namespace SynerEdge {

//static const headersize = sizeof(BlockFile::numblocks) ;

BlockFile::BlockFile(string filename) : numblocks(0), numfreeblocks(0),
		startingblocknum(0), blocksize(1024), filename(filename)
{
	freeblockmap = NULL ;
}


BlockFile::~BlockFile()
{
	//cout << "~BlockFile()" << endl ;
	close();
}

bool
BlockFile::close()
{
	//cout << "close()" << endl ;
	boost::mutex::scoped_lock lk(_mtx, true) ;
	if (file.is_open()) {
		file.close() ;
		flushFreeBlockList(false) ;
	}
	if (freeblockmapfile.is_open()) freeblockmapfile.close() ;
	if (freeblockmap) delete freeblockmap ;
	freeblockmap = NULL ;
	return true ;
}

bool
BlockFile::exists(string blockfilename)
{
	if (boost::filesystem::exists(blockfilename)) {
		return true ;
	}

	return false ;
}

bool
BlockFile::open()
{

	fstream ifile ;

//	cout << "open()" << endl ;
	boost::mutex::scoped_lock lk(_mtx, true) ;
	if (file.is_open()) {
		return true ;
	}

	string freeblockmapname = filename + ".freeblockmap" ;
	if (exists(filename) && exists(freeblockmapname)) {
		ifile.open(freeblockmapname.c_str(), ios::in) ;
		file.open(filename.c_str(), ios::in | ios::out | ios::binary) ;
		if (! file.is_open() || ! ifile.is_open()) {
			file.close();
			ifile.close();
			return false ;
		}
	} else {
		return false ;
	}



	// Error check should be done.

	//
	// Make sure we are at beginning of file
	//
	file.seekg(0, ios::beg) ;

	//
	// Read in header and fill in object structures.
	//
	file.read(reinterpret_cast<char *>(&numfreeblocks), sizeof(uint64)) ;
	file.read(reinterpret_cast<char *>(&numblocks), sizeof(uint64)) ;
	file.read(reinterpret_cast<char *>(&startingblocknum), sizeof(uint64)) ;
	file.read(reinterpret_cast<char *>(&blocksize), sizeof(int)) ;

//	cout << "numblocks = " << numblocks << endl ;
//	cout << "numfreeblocks = " << numfreeblocks << endl ;
//	cout << "startingblocknum = " << startingblocknum << endl ;
//	cout << "blocksize = " << blocksize << endl ;

	//
	// Open freeblockmap file, read in, and then reopen for write.
	//

	freeblockmap = new FreeBlockMap() ;
	ifile >> (*freeblockmap) ;
	ifile.close() ;
	freeblockmapfile.open(freeblockmapname.c_str(), ios::out) ;

	// Write current bitmap to file.
	flushFreeBlockList(false) ;

	return true ;

}

bool
BlockFile::create(uint64 startingblocknum, uint64 numblocks, int blocksize)
{
//	cout << "create()" << endl ;
	boost::mutex::scoped_lock lk(_mtx, true) ;
	
	if (numblocks < 1) {
//		cout << "numblocks < 1" << endl ;
		return false ;
	}

	if (startingblocknum < 0) {
//		cout << "startingblocknum < 0" << endl ;
		return false ;
	}

	if (file.is_open()) {
//		cout << "file already open" << endl ;
		return false ;
	}

	if (exists(filename)) {
//		cout << "file exists" << endl ;
		return false ;
	}

	if (! Block::validBlockSize(blocksize)) {
//		cout << "invalid blocksize " << blocksize << endl ;
		return false ;
	}

	file.open(filename.c_str(), ios::out | ios::binary) ;
	if (! file.is_open()) {
//		cout << "couldn't create file" << endl ;
		return false ;
	}

	//
	// Setup internal data structures
	BlockFile::numblocks = numblocks ;
	BlockFile::numfreeblocks = numblocks ;
	BlockFile::startingblocknum = startingblocknum ;
	BlockFile::blocksize = blocksize ;

	//
	// Write the header, and then write numblocks nullblocks.
	//
//	cout << "Writing header" << endl ;
	// Header
	//file << numblocks ;
	//file << numfreeblocks ;
	//file << startingblocknum ;
	//file << blocksize
	// We write numfreeblocks first to make seeking to and updates
	// an easy calculation.
	file.write(reinterpret_cast<char *>(&numfreeblocks), sizeof(uint64)) ;
	file.write(reinterpret_cast<char *>(&numblocks), sizeof(uint64)) ;
	file.write(reinterpret_cast<char *>(&startingblocknum), sizeof(uint64)) ;
	file.write(reinterpret_cast<char *>(&blocksize), sizeof(int)) ;

	// Fill in numblocks nullblocks 
//	cout << "in Blockfile blocksize = " << blocksize << endl ;
	Block nullblock(startingblocknum, blocksize) ;
	uint64 bn = startingblocknum ;

//	cout << "Sizeof block = " << nullblock.getObjectSize(blocksize) << endl ;

	for(int i = 0 ; i < numblocks ; i++) {
		nullblock.setBlockNum(bn) ;
//		cout << "Blocknum is " << nullblock.getBlockNum() << endl ;
		file << nullblock ;
		bn++ ;
	}

	file.close() ;
	file.open(filename.c_str(), ios::out | ios::in | ios::binary) ;

	if (! file.is_open()) {
//		cout << "couldn't reopen file" << endl ;
		return false ;
	}

	string freeblockmapname = filename + ".freeblockmap" ;
	freeblockmapfile.open(freeblockmapname.c_str(), ios::out) ;
	assert(freeblockmap == NULL);
	freeblockmap = new FreeBlockMap(numblocks, startingblocknum) ;
	freeblockmapfile << (*freeblockmap) ;
	freeblockmapfile.flush() ;

//	cout << "before return Blockfile blocksize = " << blocksize << endl ;
	return true ;
}

bool
BlockFile::writeBlock(uint64 blocknum, int offset, int size, char *data)
{
	PT("writeBlock(blocknum)") ;
	int bsize = Block::getObjectSize(blocksize) ;
	int wrote ;



	if (! validateAccessAndCheckNotFree(blocknum))  {
		return false ;
	}

	if (offset < 0 || offset + size <= offset || offset + size > blocksize) {
		return false ;
	}

	// Seek to where the block is
	int seekto = headersize + (blocknum - startingblocknum) * bsize ;

	boost::mutex::scoped_lock lk(_mtx, true) ;

	int where = file.tellg() ;
	if (where != seekto) {
		PT("\tseekg()") ;
		file.seekg(seekto, ios::beg) ;
		PT("\tLeaving seekg()") ;
	}
//	cout << "Current position = " << file.tellg() << endl ;

	if (offset == 0 && size == blocksize) {
		// We can optimize access here. Since we are replacing all the
		// blocks data, we don't have to read it in.
		Block b(blocksize, data) ;

		b.setBlockNum(blocknum) ;
		// b.setIsFree(false) ;
		PT("\toptimized file << b") ;
		file << b ;
		PT("\tLeaving optimized file << b") ;
	} else {
		PT("\tunoptimized") ;
		Block b(blocksize) ;
		// We'll read the block in, since we have to update block fields.
		file >> b ;
	//	cout << "Blocknum = " << b.getBlockNum() << endl ;

		// Update fields.
		wrote = b.setBytes(offset, data, size) ;
	//	cout << "Tried to write " << size << " wrote " << wrote << endl ;
	//	cout << "b.getNumBytes() = " << b.getNumBytes() << endl ;

		// seek backwards one block, so we can write this block out.
		file.seekg(-bsize, ios::cur) ;
		file << b ;
		PT("\tLeaving unoptimized") ;
	}

	PT("Leaving writeBlock(blocknum)") ;
	return true ;
}

bool
BlockFile::writeBlock(Block &block)
{
	PT("BlockFile::writeBlock(Block &block)") ;
	int bsize = Block::getObjectSize(blocksize) ;
	int blocknum = block.getBlockNum() ;



	if (! validateAccessAndCheckNotFree(blocknum)) {
		return false ;
	}

	// Make sure the block is big enough
	if (block.getSize() != blocksize) {
		return false ;
	}

	boost::mutex::scoped_lock lk(_mtx, true) ;

	// Seek to where the block is
	int seekto = headersize + (blocknum - startingblocknum) * bsize ;
	int where = file.tellg() ;
	if (where != seekto) {
		file.seekg(seekto, ios::beg) ;
	}

	// write block
	file << block ;

	PT("Leaving BlockFile::writeBlock(Block &block)") ;
	return true ;
}

bool
BlockFile::readBlock(uint64 blocknum, Block &block)
{

	if (!validateAccessAndCheckNotFree(blocknum)) {
		return false;
	}

	// block.setSize(blocksize) ;

	int seekto = headersize + ((blocknum - startingblocknum) * block.getObjectSize(blocksize)) ;
	boost::mutex::scoped_lock lk(_mtx, true) ;

	file.seekg(seekto, ios::beg) ;
	file >> block ;
	return true ;
}

bool
BlockFile::zeroBlock(uint64 blocknum)
{
	int bsize = Block::getObjectSize(blocksize) ;
	Block b(blocksize) ;

	if (!validateAccessAndCheckNotFree(blocknum)) {
		return false;
	}
	b.setNumBytes(0) ;
	b.setBlockNum(blocknum);
	return writeBlock(b);
}


bool
BlockFile::validateAccessAndCheckNotFree(uint64 blocknum)
{
	/* This is the correct code. But it breaks the tests. */
	if (( ! validateAccess(blocknum))  || freeblockmap->isFree(blocknum) ) {
		return false ;
	}
	else return true;
	
}


/*
* bool
* BlockFile::freeBlock(uint64 blocknum)
* {
* 	int bsize = Block::getObjectSize(blocksize) ;
* 	Block b(blocksize) ;
* 
* 	if(! readBlock(blocknum, b)) {
* 		return false ;
* 	}
* 
* 	if (b.isFree()) {
* 		// Block is already has 0 length for data, but is allocated
* 		return true ;
* 	} else {
* 		b.setNumBytes(0) ;
* 		b.setIsFree(true) ;
* 		boost::mutex::scoped_lock lk(_mtx, true) ;
* 		file.seekg(-bsize, ios::cur) ;
* 		file << b ;
* 	}
* 
* 	return true ;
* }
*/

uint64
BlockFile::getNumBlocks()
{
	return numblocks ;
}

uint64
BlockFile::getStartingBlockNum() const
{
	return startingblocknum ;
}

uint64
BlockFile::getNumFreeBlocks()
{
	// File should be open for this to be called.
	assert(freeblockmap != NULL);
	return freeblockmap->getFreeBlockCount() ;
}

int
BlockFile::getBlockSize() const
{
	return blocksize ;
}

bool
BlockFile::validateAccess(uint64 blocknum)
{
	if (! file.is_open()) {
		//cout << "File isn't open" << endl ;
		return false ;
	}

	if (blocknum < startingblocknum) {
		//cout << "blocknum < startingblocknum " << blocknum << "<" << startingblocknum << endl ;
		return false ;
	}

	if (blocknum >= startingblocknum + numblocks) {
		//cout << "blocknum > startingblocknum + numblocks" << blocknum << ">" << startingblocknum << "+" << numblocks << endl ;
		return false ;
	}

	return true ;
}

uint64
BlockFile::getFreeBlock()
{
	assert(freeblockmap);
	boost::mutex::scoped_lock lk(_mtx, true) ;
	PT("BlockFile::getFreeBlock()") ;
	uint64 freeblock = freeblockmap->allocateBlock() ;
	PT("Leaving BlockFile::getFreeBlock()") ;
	return freeblock ;
}

string
BlockFile::getFilename() const
{
	return filename ;
}

bool
BlockFile::releaseBlock(uint64 blocknum)
{
	assert(freeblockmap);
	return freeblockmap->freeBlock(blocknum) ;
}

bool
BlockFile::flushFreeBlockList()
{
	return flushFreeBlockList(true) ;
}

bool
BlockFile::flushFreeBlockList(bool lock)
{
	assert(freeblockmap);
	if (lock) {
		boost::mutex::scoped_lock lk(_mtx, true) ;
		freeblockmapfile.seekp(0, ios::beg) ;
		freeblockmapfile << (*freeblockmap) ;
		freeblockmapfile.flush() ;
	} else {
		freeblockmapfile.seekp(0, ios::beg) ;
		freeblockmapfile << (*freeblockmap) ;
		freeblockmapfile.flush() ;
	}

	return true ;
}

/*
void
BlockFile::printStuff()
{
	cout << "======= PRINT BLOCK DATA ========" << endl ;
	cout << "numblocks = " << numblocks << endl ;
	cout << "numfreeblocks = " << numfreeblocks << endl ;
	cout << "startingblocknum = " << startingblocknum << endl ;
	cout << "blocksize = " << blocksize << endl ;
	cout << "filename = " << filename << endl ;
	cout << "======= END  ========" << endl ;
}
*/
} //namespace SynerEdge
@


1.14
log
@*** empty log message ***
@
text
@d31 1
a31 1
void
d43 1
d93 3
a95 3
	file.read(reinterpret_cast<char *>(&numfreeblocks), sizeof(int64)) ;
	file.read(reinterpret_cast<char *>(&numblocks), sizeof(int64)) ;
	file.read(reinterpret_cast<char *>(&startingblocknum), sizeof(int64)) ;
d120 1
a120 1
BlockFile::create(int64 startingblocknum, int64 numblocks, int blocksize)
d174 3
a176 3
	file.write(reinterpret_cast<char *>(&numfreeblocks), sizeof(int64)) ;
	file.write(reinterpret_cast<char *>(&numblocks), sizeof(int64)) ;
	file.write(reinterpret_cast<char *>(&startingblocknum), sizeof(int64)) ;
d182 1
a182 1
	int64 bn = startingblocknum ;
d213 1
a213 1
BlockFile::writeBlock(int64 blocknum, int offset, int size, char *data)
d309 1
a309 1
BlockFile::readBlock(int64 blocknum, Block &block)
d327 1
a327 1
BlockFile::zeroBlock(int64 blocknum)
d342 1
a342 1
BlockFile::validateAccessAndCheckNotFree(int64 blocknum)
d355 1
a355 1
* BlockFile::freeBlock(int64 blocknum)
d379 2
a380 2
int64
BlockFile::getNumBlocks() const
d385 1
a385 1
int64
d391 2
a392 2
int64
BlockFile::getNumFreeBlocks() const
d406 1
a406 1
BlockFile::validateAccess(int64 blocknum)
d426 1
a426 1
int64
d432 1
a432 1
	int64 freeblock = freeblockmap->allocateBlock() ;
d444 1
a444 1
BlockFile::releaseBlock(int64 blocknum)
@


1.13
log
@Missed a "return true" in validate function.
@
text
@d224 1
a224 1
	if (offset + size > blocksize) {
@


1.12
log
@Changes:

Block.*: isfree is useless in this version.
           Some bug fixes with bound checking.
           zeroBlock modified to avoid a read.
	   Some functionality to change block sizes dynamically removed.

BlockFile.*: delete freeBlock functionality. releaseBlock is the correct
              way to remove a block.
	    Main change: readBlock, writeBlock would fail if a block
			is free.
             Some bug fixes.
             Avoid use of isFree in a block.

FreeBlockMap.*: added a function to check if a blocknum is free. Used
	    by BlockFile

NOTES: code review notes.
@
text
@d344 1
a344 1
	if (! validateAccess(blocknum)  || freeblockmap->isFree(blocknum)) {
d347 1
a348 6
	/* 
	if (! validateAccess(blocknum))  {
		return false ;
	}
	return true;
	*/
@


1.11
log
@Added simple locking from boost. Will update once we have decided on what
threading interface to use for locking.
@
text
@a0 1

d21 1
a21 1
	//freeblockmap = NULL ;
d28 1
a28 7
	boost::mutex::scoped_lock lk(_mtx, true) ;
	if (file.is_open()) {
		file.close() ;
		flushFreeBlockList(false) ;
		freeblockmapfile.close() ;
	//	delete freeblockmap ;
	}
a38 3
		freeblockmapfile.close() ;
		delete freeblockmap ;
		freeblockmap = NULL ;
d40 3
d58 3
d67 3
a69 1
	if (exists(filename)) {
d71 3
a73 1
		if (! file.is_open()) {
d80 4
d105 1
a105 3
	string freeblockmapname = filename + ".freeblockmap" ;
	fstream ifile ;
	ifile.open(freeblockmapname.c_str(), ios::in) ;
d123 1
d202 1
d218 3
a220 1
	if (! validateAccess(blocknum) ) {
d247 1
a247 1
		b.setIsFree(false) ;
d280 3
a282 1
	if (! validateAccess(blocknum)) {
d310 3
a312 2
	if (! validateAccess(blocknum)) {
		return false ;
d315 1
a315 1
	block.setSize(blocksize) ;
d331 2
a332 13
	if(! readBlock(blocknum, b)) {
		return false ;
	}

	if (b.getNumBytes() == 0 && (! b.isFree())) {
		// Block is already has 0 length for data, but is allocated
		return true ;
	} else {
		b.setNumBytes(0) ;
		b.setIsFree(false) ;
		boost::mutex::scoped_lock lk(_mtx, true) ;
		file.seekg(-bsize, ios::cur) ;
		file << b ;
d334 4
a338 2
	return true ;
}
d341 1
a341 1
BlockFile::freeBlock(int64 blocknum)
d343 7
a349 4
	int bsize = Block::getObjectSize(blocksize) ;
	Block b(blocksize) ;

	if(! readBlock(blocknum, b)) {
d352 3
a355 10
	if (b.isFree()) {
		// Block is already has 0 length for data, but is allocated
		return true ;
	} else {
		b.setNumBytes(0) ;
		b.setIsFree(true) ;
		boost::mutex::scoped_lock lk(_mtx, true) ;
		file.seekg(-bsize, ios::cur) ;
		file << b ;
	}
d357 25
a381 2
	return true ;
}
d398 2
d422 1
a422 1
	if (blocknum > startingblocknum + numblocks) {
d433 1
d450 1
d463 1
@


1.10
log
@Use boost to check for file existence. Add a routine to get the blockfile
file path.
@
text
@d28 2
d32 1
a32 1
		flushFreeBlockList() ;
d41 2
d45 1
a45 1
		flushFreeBlockList() ;
d65 2
d110 1
a110 1
	flushFreeBlockList() ;
d119 2
d224 3
d283 2
d309 2
d332 1
d356 1
d412 1
d434 16
a449 3
	freeblockmapfile.seekp(0, ios::beg) ;
	freeblockmapfile << (*freeblockmap) ;
	freeblockmapfile.flush() ;
@


1.9
log
@Changes to speed up filesystem.
@
text
@d8 1
a47 1
// Should move this to a utilities file
d49 1
a49 1
CheckForFile(string filename)
d51 2
a52 6
	fstream fin ;
	bool exists = false ;

	fin.open(filename.c_str(), ios::in) ;
	if (fin.is_open()) {
		exists = true ;
a53 1
	fin.close() ;
d55 1
a55 1
	return exists ;
d65 1
a65 1
	if (CheckForFile(filename)) {
d128 1
a128 1
	if (CheckForFile(filename)) {
d399 6
@


1.8
log
@Updates to find performance issues.
@
text
@d221 6
a226 1
	file.seekg(seekto, ios::beg) ;
d229 27
a255 14
	// We'll read the block in, since we have to update block fields.
	Block b(blocksize) ;
	file >> b ;
//	cout << "Blocknum = " << b.getBlockNum() << endl ;

	// Update fields.
	wrote = b.setBytes(offset, data, size) ;
//	cout << "Tried to write " << size << " wrote " << wrote << endl ;
//	cout << "b.getNumBytes() = " << b.getNumBytes() << endl ;

	// seek backwards one block, so we can write this block out.
	file.seekg(-bsize, ios::cur) ;
//	cout << "new position = " << file.tellg() << endl ;
	file << b ;
d279 4
a282 1
	file.seekg(seekto, ios::beg) ;
@


1.7
log
@When we open the bitmap flush the current bitmap to ensure that we haven't
overwritten the bitmap file.
@
text
@d7 1
d207 1
d239 1
d246 1
d266 1
d379 4
a382 1
	return freeblockmap->allocateBlock() ;
@


1.6
log
@Not correctly checking to see if a blockfile exists (on open() method)
@
text
@d107 3
@


1.5
log
@Move Unit Tests to utest directory. Move FreeBlockMap to storprovider. Fix up
BlockFile to call FreeBlockMap to get freeblocks.
@
text
@a25 1
	cout << "~BlockFile" << endl ;
d74 2
a320 1
	return false ;
d351 1
d356 1
d361 1
@


1.4
log
@
Added debug output to BlockFile.cpp and added functionality to Block.cpp
@
text
@a1 1
#include <sys/types.h>
d5 1
a12 3
bool openBlockFile(string filename) ;
bool createBlockFile(string filename, off_t startingblocknum, int numfreeblocks) ;

d20 1
d26 1
d29 3
d40 4
d47 1
d85 3
a87 3
	file.read(reinterpret_cast<char *>(&numfreeblocks), sizeof(off_t)) ;
	file.read(reinterpret_cast<char *>(&numblocks), sizeof(off_t)) ;
	file.read(reinterpret_cast<char *>(&startingblocknum), sizeof(off_t)) ;
d95 11
d111 1
a111 1
BlockFile::create(off_t startingblocknum, off_t numblocks, int blocksize)
d162 3
a164 3
	file.write(reinterpret_cast<char *>(&numfreeblocks), sizeof(off_t)) ;
	file.write(reinterpret_cast<char *>(&numblocks), sizeof(off_t)) ;
	file.write(reinterpret_cast<char *>(&startingblocknum), sizeof(off_t)) ;
d170 1
a170 1
	off_t bn = startingblocknum ;
d189 6
d200 1
a200 1
BlockFile::writeBlock(off_t blocknum, int offset, int size, char *data)
a232 2
	updateNumFreeBlocks(-1) ;

a257 2
	updateNumFreeBlocks(-1) ;

d262 1
a262 1
BlockFile::readBlock(off_t blocknum, Block &block)
d277 1
a277 1
BlockFile::zeroBlock(off_t blocknum)
d300 1
a300 1
BlockFile::freeBlock(off_t blocknum)
d323 1
a323 1
off_t
d329 1
a329 1
off_t
d335 1
a335 1
off_t
d338 1
a338 1
	return numfreeblocks ;
d348 1
a348 1
BlockFile::validateAccess(off_t blocknum)
d365 19
a383 11
//
// The numfreeblocks variable should be stored externally 
// to minimize disk seeking?
//
bool
BlockFile::updateNumFreeBlocks(int by)
{
	// seek to beginning of file.
//	file.seekg(0, ios::beg) ;
	numfreeblocks += by ;
//	file.write(reinterpret_cast<char *>(&numfreeblocks), sizeof(off_t)) ;
@


1.3
log
@Finished unit testing Block and BlockFile interfaces. The BlockFile interface is
currently very simple, and is missing a persistent sense of freeblocks. This
needs to be fixed up.

Currently neither interface does any thread syncroniziation. For BlockFile we should
probably consider keeping numfreeblocks as a static member shared across all classes
and syncing on it. Might need to put in block level locking as well. This way multiple
BlockFile's can be instantiated pointing to the same disk file, and thread access
to it.
@
text
@d136 1
a136 1

@


1.2
log
@
Write interfaces and unit tests for new block interface. The next step will
be to port the filesystem over to the new interface.
@
text
@d78 1
a79 1
	file.read(reinterpret_cast<char *>(&numfreeblocks), sizeof(off_t)) ;
d142 3
a145 1
	file.write(reinterpret_cast<char *>(&numfreeblocks), sizeof(off_t)) ;
a152 2
	char *buf = "ABC123" ;
	nullblock.setBytes(0, buf, 7) ;
d175 1
a175 1
int
d181 8
d192 1
a192 1
	cout << "Current position = " << file.tellg() << endl ;
d197 1
a197 1
	cout << "Blocknum = " << b.getBlockNum() << endl ;
d201 2
a202 2
	cout << "Tried to write " << size << " wrote " << wrote << endl ;
	cout << "b.getNumBytes() = " << b.getNumBytes() << endl ;
d206 1
a206 1
	cout << "new position = " << file.tellg() << endl ;
d208 31
a238 1
	return 0 ;
d244 1
a244 1
	if (blocknum < startingblocknum) {
d259 18
a276 1
	return false ;
d280 1
a280 1
freeBlock(off_t blocknum)
d282 18
d325 32
@


1.1
log
@
Buildable (but not functional) syg_storprovider. The move from fs to the
storprovider directory has started. Right now there are duplicated files
that will be cleaned up. This doesn't affect the build.
@
text
@d16 2
d20 2
a21 1
BlockFile::BlockFile(string filename)
a22 3
	if (! openBlockFile(filename)) {
		throw seerror("filename does not exist") ;
	}
d25 2
a26 1
BlockFile::BlockFile(string filename, off_t startingblocknum, int numfreeblocks)
d28 2
a29 2
	if (! createBlockFile(filename, startingblocknum, numfreeblocks)) {
		throw seerror("could not create blockfile") ;
d33 2
a34 1
BlockFile::~BlockFile()
d57 1
a57 1
BlockFile::openBlockFile(string filename)
d64 1
a64 1
		file.open(filename.c_str(), ios::in | ios::ate | ios::binary) ;
d70 18
d93 1
a93 1
BlockFile::createBlockFile(string filename, off_t startingblocknum, int numblocks)
d96 1
d101 1
d106 1
d111 6
d122 1
d131 1
a131 2
	firstfreeblock = sizeof(BlockFile::numblocks) + sizeof(numfreeblocks) +
			sizeof(BlockFile::startingblocknum) + sizeof(firstfreeblock) ;
d141 3
a143 3
	//file << firstfreeblock ;
	file.write(reinterpret_cast<char *>(&numblocks), sizeof(int)) ;
	file.write(reinterpret_cast<char *>(&numfreeblocks), sizeof(int)) ;
d145 1
a145 10
	file.write(reinterpret_cast<char *>(&firstfreeblock), sizeof(off_t)) ;

	// Fill in nullblocks 
	Block nullblock(startingblocknum) ;
	off_t nboffset ; // Next blockoffset
	off_t pboffset ; // Previous blockoffset
	int sizeofblock = sizeof(Block) ;
	int sizeofheader = sizeof(numblocks)+sizeof(numfreeblocks)+sizeof(startingblocknum)+
				sizeof(firstfreeblock) ;
	off_t bn = startingblocknum ; // blocknum to increment
d147 6
a152 1
	cout << "Sizeof block = " << sizeofblock << endl ;
d154 1
a154 2
	pboffset = 0 ;
	nboffset = sizeofheader+sizeofblock ;
a156 2
		nullblock.setPrevBlock(pboffset) ;
		nullblock.setNextBlock(nboffset) ;
a158 1
//		cout << "NextBlock is " << nullblock.getNextBlock() << endl ;
a159 2
		pboffset = nboffset ;
		nboffset += sizeofblock ;
d167 1
d171 1
d176 1
a176 1
BlockFile::writeBlock(int blocknum, int offset, int size, char *data)
d178 22
d203 2
a204 2
int
BlockFile::readBlock(off_t blocknum, int offset, int size, char *data)
d207 1
a207 1
		return 0 ;
d210 3
a212 2
	Block block(0) ;
	int seekto = headersize + ((blocknum - startingblocknum) * sizeof(Block)) ;
d215 7
a221 1
	return 0 ;
d224 2
a225 2
int
BlockFile::clearBlock(int blocknum)
d227 1
a227 1
	return 0 ;
d248 20
@

