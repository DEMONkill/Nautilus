head	1.3;
access;
symbols;
locks; strict;
comment	@// @;


1.3
date	2005.06.12.01.39.04;	author gtarcea;	state Exp;
branches;
next	1.2;
deltatype	text;
permissions	666;
commitid	76442ab91ef00b4;
kopt	kv;
filename	@FreeBlockMap.hpp@;

1.2
date	2005.06.09.16.49.02;	author aprakash;	state Exp;
branches;
next	1.1;
deltatype	text;
permissions	666;
commitid	f2442a8723e4d3f;
kopt	kv;
filename	@FreeBlockMap.hpp@;

1.1
date	2005.04.21.16.48.37;	author gtarcea;	state Exp;
branches;
next	;
deltatype	text;
permissions	666;
commitid	2fc4267d9355a40;
kopt	kv;
filename	@FreeBlockMap.hpp@;


desc
@@


1.3
log
@
Move BlockFileBase.hpp to iBlockIO.hpp
Cleaned up interfaces to support uint64 rather than int64
VirtualDisk and VirtualBlockFile now also inherit from iBlockIO, so now
BlockFileIO can use any of these interfaces.
@
text
@
#ifndef __FreeBlockMap_INCLUDE_
#define __FreeBlockMap_INCLUDE_

#include "boost/dynamic_bitset.hpp"
#include "SynerEdge.hpp"
#include <iostream>

using namespace std ;

namespace SynerEdge {

class FreeBlockMap {

public:
	FreeBlockMap(uint64 numblocks, uint64 startingblocknum) ;
	FreeBlockMap() ;

	uint64 allocateBlock() ; // Allocates block
	bool isFree(uint64 blocknum); /* Returns true if block is free. Returns false if blocknum 
							  out of range or allocated */
	bool freeBlock(uint64 blocknum) ; // Returns block to free list

	uint64 getFreeBlockCount() ;

	friend istream &operator>>(istream &input, FreeBlockMap &bmap) ;
	friend ostream &operator<<(ostream &output, const FreeBlockMap &bmap) ;


private:
	boost::dynamic_bitset<> *blockmap ;
	uint64 startingblocknum ;

} ; // class FreeBlockMap

} ; // namespace SynerEdge
#endif // __FreeBlockMap_INCLUDE_
@


1.2
log
@Changes:

Block.*: isfree is useless in this version.
           Some bug fixes with bound checking.
           zeroBlock modified to avoid a read.
	   Some functionality to change block sizes dynamically removed.

BlockFile.*: delete freeBlock functionality. releaseBlock is the correct
              way to remove a block.
	    Main change: readBlock, writeBlock would fail if a block
			is free.
             Some bug fixes.
             Avoid use of isFree in a block.

FreeBlockMap.*: added a function to check if a blocknum is free. Used
	    by BlockFile

NOTES: code review notes.
@
text
@d16 1
a16 1
	FreeBlockMap(int64 numblocks, int64 startingblocknum) ;
d19 2
a20 2
	int64 allocateBlock() ; // Allocates block
	bool isFree(int64 blocknum); /* Returns true if block is free. Returns false if blocknum 
d22 1
a22 1
	bool freeBlock(int64 blocknum) ; // Returns block to free list
d24 1
a24 1
	int64 getFreeBlockCount() ;
d32 1
a32 1
	int64 startingblocknum ;
@


1.1
log
@Move Unit Tests to utest directory. Move FreeBlockMap to storprovider. Fix up
BlockFile to call FreeBlockMap to get freeblocks.
@
text
@d20 2
d23 1
@

