head	1.3;
access;
symbols;
locks; strict;
comment	@// @;


1.3
date	2005.05.31.18.12.09;	author gtarcea;	state dead;
branches;
next	1.2;
deltatype	text;
permissions	444;
commitid	79c429ca8e34fd5;
kopt	kv;
filename	@StorageProviderServerInterface.cpp@;

1.2
date	2005.05.25.16.12.33;	author gtarcea;	state Exp;
branches;
next	1.1;
deltatype	text;
permissions	666;
commitid	17c4294a3e71fa7;
kopt	kv;
filename	@StorageProviderServerInterface.cpp@;

1.1
date	2005.05.24.19.53.47;	author gtarcea;	state Exp;
branches;
next	;
deltatype	text;
permissions	666;
commitid	d34429386397abe;
kopt	kv;
filename	@StorageProviderServerInterface.cpp@;


desc
@@


1.3
log
@Rename StorageProviderServerInterface to StorProvSvrInterface
@
text
@
#include "StorageProviderServerInterface.hpp"
#include <iostream>

using namespace std ;

namespace SynerEdge {

StorageProviderServerInterface::StorageProviderServerInterface(BlockFile &bf)
	: bf(bf)
{
	blockSize = bf.getBlockSize() ;
}

XdrStream *
StorageProviderServerInterface::getNumBlocks(Context &ctx, XdrStream &xdrs)
{
	int64 result;
	XdrStream *res = new XdrStream();
	result =  bf.getNumBlocks() ;
	(*res) << result;
	return res;
}

XdrStream *
StorageProviderServerInterface::getNumFreeBlocks(Context &ctx, XdrStream &xdrs)
{
	int64 result;
	XdrStream *res = new XdrStream();
	result =  bf.getNumFreeBlocks() ;
	(*res) << result;
	return res;
}

XdrStream *
StorageProviderServerInterface::getFreeBlock(Context &ctx, XdrStream &xdrs)
{
	int64 result;
	XdrStream *res = new XdrStream();
	result =  bf.getFreeBlock();
	(*res) << result;
	return res;
}

XdrStream *
StorageProviderServerInterface::releaseBlock(Context &ctx, XdrStream &xdrs)
{
	int len ;
	int64 blocknum;
	bool result;
	XdrStream *res = new XdrStream();
	//xdrs >> len ;
	xdrs >> blocknum;
	result =  bf.releaseBlock(blocknum);
	(*res) << result;
	return res;
}

XdrStream *
StorageProviderServerInterface::flushFreeBlockList(Context &ctx, XdrStream &xdrs)
{
	bool result;
	XdrStream *res = new XdrStream();
	result =  bf.flushFreeBlockList();
	(*res) << result;
	return res;
}

XdrStream *
StorageProviderServerInterface::writeBlock(Context &ctx, XdrStream &xdrs)
{
	int len ;
	int64 blocknum;
	int offset ;
	int size ;
	string data ;
	bool result;
	XdrStream *res = new XdrStream();
	//xdrs >> len ;
	//cout << "len = " << len << endl ;
	xdrs >> blocknum ;
//	cout << "blocknum = " << blocknum << endl ;
	xdrs >> offset ;
//	cout << "offset = " << offset << endl ;
	xdrs >> size ;
//	cout << "size = " << size << endl ;
	xdrs >> data ;
	result =  bf.writeBlock(blocknum, offset, size, const_cast<char *>(data.c_str()));
	(*res) << result;
	return res;
}

XdrStream *
StorageProviderServerInterface::readBlock(Context &ctx, XdrStream &xdrs)
{
	int len ;
	int64 blocknum;
	int result;
	Block block(blockSize) ;
	XdrStream *res = new XdrStream();
	//xdrs >> len ;
	xdrs >> blocknum;
	result =  bf.readBlock(blocknum, block);
	(*res) << result;
	if (result) {
	//	cout << "result is true" << endl ;
		(*res) << blocknum ;
		(*res) << block.isFree() ;
		(*res) << block.getNumBytes() ;
		(*res) << block.getSize() ;
		(*res) << string(block.getBytes()) ;
	}
	return res;
}

XdrStream *
StorageProviderServerInterface::zeroBlock(Context &ctx, XdrStream &xdrs)
{
	int len ;
	int64 blocknum ;
	int result;
	XdrStream *res = new XdrStream();
	//xdrs >> len ;
	xdrs >> blocknum;
	result =  bf.zeroBlock(blocknum);
	(*res) << result;
	return res;
}

} // namespace SynerEdge
@


1.2
log
@Unit Tested
@
text
@@


1.1
log
@First compiling skeleton code for StorageProvider server.
@
text
@d3 3
d16 10
d52 1
a52 1
	xdrs >> len ;
d79 2
a80 1
	xdrs >> len ;
d82 3
d86 1
d97 1
a97 1
	int blocknum;
d101 1
a101 1
	xdrs >> len ;
d105 8
a112 5
	(*res) << blocknum ;
	(*res) << block.isFree() ;
	(*res) << block.getNumBytes() ;
	(*res) << block.getSize() ;
	(*res) << block.getBytes() ;
d123 1
a123 1
	xdrs >> len ;
a125 14
	(*res) << result;
	return res;
}

XdrStream *
StorageProviderServerInterface::freeBlock(Context &ctx, XdrStream &xdrs)
{
	int len ;
	int64 blocknum;
	int result;
	XdrStream *res = new XdrStream();
	xdrs >> len ;
	xdrs >> blocknum;
	result =  bf.freeBlock(blocknum);
@

