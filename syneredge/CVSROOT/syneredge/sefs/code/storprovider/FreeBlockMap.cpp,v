head	1.5;
access;
symbols;
locks; strict;
comment	@// @;


1.5
date	2005.06.12.01.39.04;	author gtarcea;	state Exp;
branches;
next	1.4;
deltatype	text;
permissions	666;
commitid	76442ab91ef00b4;
kopt	kv;
filename	@FreeBlockMap.cpp@;

1.4
date	2005.06.10.18.32.10;	author gtarcea;	state Exp;
branches;
next	1.3;
deltatype	text;
permissions	666;
commitid	93442a9dc976c86;
kopt	kv;
filename	@FreeBlockMap.cpp@;

1.3
date	2005.06.10.02.55.42;	author aprakash;	state Exp;
branches;
next	1.2;
deltatype	text;
permissions	666;
commitid	39442a901251fe8;
kopt	kv;
filename	@FreeBlockMap.cpp@;

1.2
date	2005.06.09.16.49.02;	author aprakash;	state Exp;
branches;
next	1.1;
deltatype	text;
permissions	666;
commitid	f2442a8723e4d3f;
kopt	kv;
filename	@FreeBlockMap.cpp@;

1.1
date	2005.04.21.16.48.37;	author gtarcea;	state Exp;
branches;
next	;
deltatype	text;
permissions	666;
commitid	2fc4267d9355a40;
kopt	kv;
filename	@FreeBlockMap.cpp@;


desc
@@


1.5
log
@
Move BlockFileBase.hpp to iBlockIO.hpp
Cleaned up interfaces to support uint64 rather than int64
VirtualDisk and VirtualBlockFile now also inherit from iBlockIO, so now
BlockFileIO can use any of these interfaces.
@
text
@
#include "FreeBlockMap.hpp"
#include "seerror.hpp"
#include <iostream>

using namespace std ;

/*
** Blocks are kept in a bitmap. If a bit is set to 0 then it is allocated,
** a 1 indicates this is free. This may seem counter-intuitive, but it is
** done this way because the bitset class has a function to find first
** set bit, but not the first free bit. So we reverse the meaning of having
** a bit set to free. The init() virtual function must observe this behavior
** when setting up a bit array.
*/

namespace SynerEdge {

FreeBlockMap::FreeBlockMap(uint64 numblocks, uint64 startingblocknum)
		: startingblocknum(startingblocknum)
{
	if (numblocks < 1) {
		throw seerror("numblocks must be greater than 0") ;
	}

	if (startingblocknum < 1) {
		throw seerror("startingblocknum must be greater than 0") ;
	}

	blockmap = new boost::dynamic_bitset<>(numblocks) ;

	blockmap->set() ;
	// cout << "this = " << this << ". FreeBlockMap constructor: numblocks = " << numblocks << " , blockmap freelist size is " << blockmap->count() << endl;
}

FreeBlockMap::FreeBlockMap() : startingblocknum(1)
{
	blockmap = new boost::dynamic_bitset<>(10) ;
	blockmap->set() ;
	// cout << "this = " << this << ". FreeBlockMap constructor: blockmap freelist size is " << blockmap->count() << endl;
}

uint64 
FreeBlockMap::allocateBlock()
{
	uint64 bitnum ;

	// cout << "this = " << this << ". Before allocateBlock: blockmap free size is " << blockmap->count() << endl;
	bitnum = blockmap->find_first() ;

	if (bitnum == blockmap->npos) {
		return 0 ;
	}

	blockmap->set(bitnum, false) ;

	// cout << "this = "<< this << ". After allocateBlock: blockmap free size is " << blockmap->count() << endl;
	return bitnum + startingblocknum ;
}

bool
FreeBlockMap::freeBlock(uint64 blocknum)
{

	uint64 index = blocknum - startingblocknum ;

	if ((index < 0 ) || (index >= blockmap->npos)) {
		return false ;
	}
	// cout << "this = " << this << ". Before freeBlock: blockmap free size is " << blockmap->count() << endl;
	if ((*blockmap)[index]) {
		//std::cerr << "FreeBlockMap::freeBlock:  attempt to free an already free block" << endl;
		return false;  // block is already free
	}
	(*blockmap)[index] = true ;
	// cout << "this = " << this << ". Aafter freeBlock: blockmap free size is " << blockmap->count() << endl;
	return true ;
}

bool
FreeBlockMap::isFree(uint64 blocknum)
{
	uint64 index = blocknum - startingblocknum;
	if ((index < 0 ) || (index >= blockmap->npos)) {
		assert(false);
	}
	if ((*blockmap)[index]) return true;
	else return false;
}


uint64
FreeBlockMap::getFreeBlockCount()
{
	
	uint64 returnval =  blockmap->count() ;
	// cout << "this = " << this << ". getFreeBlockCount: return value is " << returnval << endl;
	return returnval;
}

istream &operator>>(istream &input, FreeBlockMap &bmap)
{
	input >> bmap.startingblocknum ;
	input >> (*bmap.blockmap) ;
	return input ;
}

ostream &operator<<(ostream &output, const FreeBlockMap &bmap)
{
	output << bmap.startingblocknum << endl ;
	output << (*bmap.blockmap) ;
	return output ;
}

} // namespace SynerEdge
@


1.4
log
@Take out cout. Need to talk with Atul as to whether or not this is an error.
@
text
@d19 1
a19 1
FreeBlockMap::FreeBlockMap(int64 numblocks, int64 startingblocknum)
d43 1
a43 1
int64 
d46 1
a46 1
	int64 bitnum ;
d62 1
a62 1
FreeBlockMap::freeBlock(int64 blocknum)
d65 1
a65 1
	int64 index = blocknum - startingblocknum ;
d81 1
a81 1
FreeBlockMap::isFree(int64 blocknum)
d83 1
a83 1
	int64 index = blocknum - startingblocknum;
d92 1
a92 1
int64
d96 1
a96 1
	int64 returnval =  blockmap->count() ;
@


1.3
log
@*** empty log message ***
@
text
@d72 1
a72 1
		std::cerr << "FreeBlockMap::freeBock:  attempt to free an already free block" << endl;
@


1.2
log
@Changes:

Block.*: isfree is useless in this version.
           Some bug fixes with bound checking.
           zeroBlock modified to avoid a read.
	   Some functionality to change block sizes dynamically removed.

BlockFile.*: delete freeBlock functionality. releaseBlock is the correct
              way to remove a block.
	    Main change: readBlock, writeBlock would fail if a block
			is free.
             Some bug fixes.
             Avoid use of isFree in a block.

FreeBlockMap.*: added a function to check if a blocknum is free. Used
	    by BlockFile

NOTES: code review notes.
@
text
@d71 4
a74 1
	assert(! ((*blockmap)[index]) );  // block is not already free
@


1.1
log
@Move Unit Tests to utest directory. Move FreeBlockMap to storprovider. Fix up
BlockFile to call FreeBlockMap to get freeblocks.
@
text
@d33 1
d38 1
a38 1
	blockmap = new boost::dynamic_bitset<>(1) ;
d40 1
d48 1
d57 1
d64 1
d70 2
a71 1

d73 1
d77 12
d92 4
a95 1
	return blockmap->count() ;
a106 4
	//cout << endl << "======= begin bitmap write =====" << endl ;
//	cout << bmap.startingblocknum << endl ;
//	cout << (*bmap.blockmap) ;
//	cout << endl << "======= end bitmap write =====" << endl ;
@

