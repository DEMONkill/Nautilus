head	1.2;
access;
symbols
	sefs10:1.1.1.1
	syneredge:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2005.04.13.19.19.18;	author gtarcea;	state dead;
branches;
next	1.1;
deltatype	text;
permissions	555;
commitid	e58425d709a5cc5;
kopt	kv;
filename	@arraylisttester.c@;

1.1
date	2005.04.08.17.49.29;	author gtarcea;	state Exp;
branches
	1.1.1.1;
next	;
deltatype	text;
permissions	777;

1.1.1.1
date	2005.04.08.17.49.29;	author gtarcea;	state Exp;
branches;
next	;
deltatype	text;
permissions	777;


desc
@@


1.2
log
@File removal didn't take?
@
text
@
#include "arraylist.h"
#include "tester.h"
#include <stdio.h>

int
test_arraylist_boundaries()
{
	return 1 ;
}

int
compareitemfunc(void *a, void *b)
{
	int aint, bint ;

	printf("inside of compareitemfunc\n");
	if (! a) {
		printf("!a\n") ;
	}

	if (! b) {
		printf("!b\n") ;
	}
	aint = *((int *) a) ;
	bint = *((int *) b) ;

	return (aint == bint) ;
}

int
itemfindfunc(void *item, void *what)
{
	int itemint, whatint ;

	itemint = *((int *) item) ;
	whatint = *((int *) what) ;

	return (itemint == whatint) ;
}

int
freeitemfunc(void *item)
{
	return 1 ;
}

int
test_arraylist_insert_delete()
{
	ARRAYLISTP list ;
	int item1, item2, item3 ;
	int nonexistitem ;
	int *anitem ;
	int rc ;
	int count ;

	list = arraylist_create(20) ;
	if (! list) {
		printf("arraylist_create(20) failed\n") ;
		return 0 ;
	}

	arraylist_setcomparefunc(list, compareitemfunc) ;
	arraylist_setitemfreefunc(list, freeitemfunc) ;

	nonexistitem = 10000 ;

	item1 = 1 ;
	printf("add item1\n") ;
	rc = arraylist_additem(list, (void *) &item1) ;
	if (! rc) {
		printf("arraylist_additem(item1) failed\n") ;
		return 0 ;
	}

	count = arraylist_getitemcount(list) ;

	if (count != 1) {
		printf("arraylist_getitemcount() != 1 (%d)\n", count) ;
		return 0 ;
	}

	item2 = 2 ;
	printf("add item2\n") ;
	rc = arraylist_additem(list, (void *) &item2) ;
	if (! rc) {
		printf("arraylist_additem(item2) failed\n") ;
		return 0 ;
	}

	item3 = 3 ;
	printf("add item3\n") ;
	rc = arraylist_additem(list, (void *) &item3) ;
	if (! rc) {
		printf("arraylist_additem(item3) failed\n") ;
		return 0 ;
	}

	anitem = (int *) arraylist_getnextitem(list, LSTART) ;
	printf("anitem = %d\n", (int) *anitem) ;
	if (*anitem != 1) {
		printf("arraylist_getnextitem(LSTART) != 1\n") ;
		return 0 ;
	}

	anitem = (int *) arraylist_getnextitem(list, LNEXT) ;
	printf("anitem = %d\n", (int) *anitem) ;
	if (*anitem != 2) {
		printf("arraylist_getnextitem(LNEXT) != 2\n") ;
		return 0 ;
	}

	anitem = (int *) arraylist_getnextitem(list, LNEXT) ;
	printf("anitem = %d\n", (int) *anitem) ;
	if (*anitem != 3) {
		printf("arraylist_getnextitem(LNEXT) != 3\n") ;
		return 0 ;
	}

	anitem = (int *) arraylist_getnextitem(list, LNEXT) ;
	if (anitem != NULL) {
		printf("arraylist_getnextitem(LNEXT) != NULL\n") ;
		return 0 ;
	}

	anitem = (int *) arraylist_getnextitem(list, LSTART) ;
	printf("anitem = %d\n", (int) *anitem) ;
	if (*anitem != 1) {
		printf("arraylist_getnextitem(LSTART) != 1\n") ;
		return 0 ;
	}

	rc = arraylist_deleteitem(list, (void *) &item1) ;

	if (! rc) {
		printf("arraylist_deleteitem(item1) failed\n") ;
		return 0 ;
	}

	anitem = (int *) arraylist_getnextitem(list, LSTART) ;
	printf("anitem = %d\n", (int) *anitem) ;
	if (*anitem == 1) {
		printf("arraylist_getnextitem(LSTART) == 1, it was removed\n") ;
		return 0 ;
	}

	count = arraylist_getitemcount(list) ;

	if (count != 2) {
		printf("arraylist_getitemcount() != 2 (%d)\n", count) ;
		return 0 ;
	}

	rc = arraylist_deleteitem(list, (void *) &nonexistitem) ;
	if (rc) {
		printf("arraylist_deleteitem(nonexistitem) succeeded and shouldn't have\n") ;
		return 0 ;
	}

	rc = arraylist_destroy(list) ;

	if (! rc) {
		printf("arraylist_destroy() failed\n") ;
		return 0 ;
	}
	return 1 ;
}

int
test_arraylist_create_destroy()
{
	ARRAYLISTP list ;
	int rc ;

	list = arraylist_create(20) ;
	if (! list) {
		printf("arraylist_create(20) failed\n") ;
		return 0 ;
	}

	rc = arraylist_destroy(list) ;

	if (! rc) {
		printf("arraylist_destroy() failed\n") ;
		return 0 ;
	}

	return 1 ;
}

static ARRAYLISTP
create_arraylist()
{
	ARRAYLISTP list ;

	list = arraylist_create(20) ;
	if (! list) {
		printf("arraylist_create(20) failed\n") ;
		return NULL ;
	}

	arraylist_setcomparefunc(list, compareitemfunc) ;
	arraylist_setitemfreefunc(list, freeitemfunc) ;
	arraylist_setitemfindfunc(list, itemfindfunc) ;

	return list ;
}

int
test_arraylist_find(ARRAYLISTP list)
{
	int item1, item2, item3 ;
	int *anitem ;
	int ritem ;
	int rc ;


	item1 = 1 ;
	rc = arraylist_additem(list, (void *) &item1) ;
	if (! rc) {
		printf("arraylist_additem(item1) failed\n") ;
		return 0 ;
	}

	item2 = 2 ;
	rc = arraylist_additem(list, (void *) &item2) ;
	if (! rc) {
		printf("arraylist_additem(item2) failed\n") ;
		return 0 ;
	}

	item3 = 3 ;
	rc = arraylist_additem(list, (void *) &item3) ;
	if (! rc) {
		printf("arraylist_additem(item3) failed\n") ;
		return 0 ;
	}

	anitem = arraylist_finditem(list, (void *) &item3) ;

	if (! anitem) {
		printf("arraylist_finditem(3) failed to find int 3 (it exists)\n") ;
		return 0 ;
	}
	ritem = *((int *) anitem) ;

	if (ritem != 3) {
		printf("returned item from find != 3 (it should)\n") ;
		return 0 ;
	}

	return 1 ;
}

main()
{
	int rc ;
	ARRAYLISTP list ;

	P("test_arraylist_create_destroy()") ;
	rc = test_arraylist_create_destroy() ;
	S(rc, "test_arraylist_create_destroy()") ;

	P("test_arraylist_insert_delete()") ;
	rc = test_arraylist_insert_delete() ;
	S(rc, "test_arraylist_insert_delete()") ;

	list = create_arraylist() ;

	P("test_arraylist_find()") ;
	rc = test_arraylist_find(list) ;
	S(rc, "test_arraylist_find()") ;

	P("test_arraylist_boundaries()") ;
	rc = test_arraylist_boundaries(list) ;
	S(rc, "test_arraylist_boundaries()") ;

	exit(0) ;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Setup CVS
@
text
@@
