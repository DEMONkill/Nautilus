head	1.5;
access;
symbols;
locks; strict;
comment	@// @;


1.5
date	2005.06.12.01.53.35;	author gtarcea;	state dead;
branches;
next	1.4;
deltatype	text;
permissions	444;
commitid	fc042ab95790c43;
kopt	kv;
filename	@FileIO.hpp@;

1.4
date	2005.04.28.21.07.49;	author gtarcea;	state Exp;
branches;
next	1.3;
deltatype	text;
permissions	666;
commitid	ca04271509443f5;
kopt	kv;
filename	@FileIO.hpp@;

1.3
date	2005.04.25.23.06.25;	author gtarcea;	state Exp;
branches;
next	1.2;
deltatype	text;
permissions	666;
commitid	f60426d77d9343e;
kopt	kv;
filename	@FileIO.hpp@;

1.2
date	2005.04.22.18.44.51;	author gtarcea;	state Exp;
branches;
next	1.1;
deltatype	text;
permissions	666;
commitid	288426945fa016f;
kopt	kv;
filename	@FileIO.hpp@;

1.1
date	2005.04.19.20.54.36;	author gtarcea;	state Exp;
branches;
next	;
deltatype	text;
permissions	666;
commitid	d6842656fd77a30;
kopt	kv;
filename	@FileIO.hpp@;


desc
@@


1.5
log
@Move FileIO interface to iFileIO. Remove unneeded FileIO.cpp file, change
BlockFileIO.cpp/hpp to reference iFileIO
@
text
@
#ifndef __FileIO_INCLUDE_
#define __FileIO_INCLUDE_

#include "SynerEdge.hpp"
#include <string>

using std::string ;

namespace SynerEdge {

class FileIO {

public:
	FileIO() ;
	virtual ~FileIO() ;

	virtual bool open(string filename, int flags) = 0 ;
	virtual bool release() = 0 ;
	virtual int read(int64 offset, char *data, int length) = 0 ;
	virtual int write(int64 offset, const char *data, int length) = 0;
	virtual int64 getSize() = 0 ;
	virtual bool truncate(int64 at) = 0 ;
	virtual bool isAccessible(string filename, int flags) = 0 ;
	virtual int blockSize() = 0 ;
	virtual bool flush() = 0 ;

} ; // class FileIO

} ; // namespace SynerEdge

#endif // __FileIO_INCLUDE_
@


1.4
log
@Add flush() as one of the needed virtual functions.
@
text
@@


1.3
log
@Make buffer const on write. Take filename parameter for isAccessible().
@
text
@d26 1
@


1.2
log
@Fix build problems, implement functionality <bleh comment!>
@
text
@d21 1
a21 1
	virtual int write(int64 offset, char *data, int length) = 0;
d24 1
a24 1
	virtual bool isAccessible(int flags) = 0 ;
@


1.1
log
@
New BlockFile interface and corresponding unit tests. These build, not all
unit tests run. But this has not yet been integrated into the filesystem so
that still runs.
@
text
@d5 1
a5 1
#include <sys/types.h>
d20 4
a23 4
	virtual int read(off_t offset, char *data, int length) = 0 ;
	virtual int write(off_t offset, char *data, int length) = 0;
	virtual off_t getSize() = 0 ;
	virtual bool truncate(off_t at) = 0 ;
@

