head	1.3;
access;
symbols;
locks; strict;
comment	@// @;


1.3
date	2005.06.09.17.29.49;	author gtarcea;	state dead;
branches;
next	1.2;
deltatype	text;
permissions	444;
commitid	46c42a87c746e97;
kopt	kv;
filename	@FreeBlockMap.hpp@;

1.2
date	2005.04.20.19.06.01;	author gtarcea;	state Exp;
branches;
next	1.1;
deltatype	text;
permissions	666;
commitid	6a84266a80775a9;
kopt	kv;
filename	@FreeBlockMap.hpp@;

1.1
date	2005.04.19.20.54.36;	author gtarcea;	state Exp;
branches;
next	;
deltatype	text;
permissions	666;
commitid	d6842656fd77a30;
kopt	kv;
filename	@FreeBlockMap.hpp@;


desc
@@


1.3
log
@Files moved to a different directory.
@
text
@
#ifndef __FreeBlockMap_INCLUDE_
#define __FreeBlockMap_INCLUDE_

#include "boost/dynamic_bitset.hpp"
#include "SynerEdge.hpp"
#include <iostream>

using namespace std ;

namespace SynerEdge {

class FreeBlockMap {

public:
	FreeBlockMap(int64 numblocks, int64 startingblocknum) ;
	FreeBlockMap() ;

	int64 allocateBlock() ; // Allocates block
	bool freeBlock(int64 blocknum) ; // Returns block to free list
	int64 getFreeBlockCount() ;

	friend istream &operator>>(istream &input, FreeBlockMap &bmap) ;
	friend ostream &operator<<(ostream &output, const FreeBlockMap &bmap) ;


private:
	boost::dynamic_bitset<> *blockmap ;
	int64 startingblocknum ;

} ; // class FreeBlockMap

} ; // namespace SynerEdge
#endif // __FreeBlockMap_INCLUDE_
@


1.2
log
@More unit tests, plus move over to new naming convention.
@
text
@@


1.1
log
@
New BlockFile interface and corresponding unit tests. These build, not all
unit tests run. But this has not yet been integrated into the filesystem so
that still runs.
@
text
@d6 4
a9 1
#include <sys/types.h>
d16 9
a24 1
	FreeBlockMap(off_t numblocks, off_t startingblocknum) ;
a25 4
	virtual bool init() ;
	off_t allocateBlock() ; // Allocates block
	bool freeBlock(off_t blocknum) ; // Returns block to free list
	off_t getFreeBlockCount() ;
a27 2
	FreeBlockMap() ;

d29 1
a29 1
	off_t startingblocknum ;
@

