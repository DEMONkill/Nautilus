head	1.9;
access;
symbols;
locks; strict;
comment	@// @;


1.9
date	2005.06.12.01.53.35;	author gtarcea;	state Exp;
branches;
next	1.8;
deltatype	text;
permissions	666;
commitid	fc042ab95790c43;
kopt	kv;
filename	@BlockFileIO.hpp@;

1.8
date	2005.06.12.01.39.05;	author gtarcea;	state Exp;
branches;
next	1.7;
deltatype	text;
permissions	666;
commitid	76442ab91ef00b4;
kopt	kv;
filename	@BlockFileIO.hpp@;

1.7
date	2005.06.01.15.52.53;	author gtarcea;	state Exp;
branches;
next	1.6;
deltatype	text;
permissions	666;
commitid	a0c429dd99732de;
kopt	kv;
filename	@BlockFileIO.hpp@;

1.6
date	2005.04.28.21.09.27;	author gtarcea;	state Exp;
branches;
next	1.5;
deltatype	text;
permissions	666;
commitid	f20427150e544fe;
kopt	kv;
filename	@BlockFileIO.hpp@;

1.5
date	2005.04.26.15.23.18;	author gtarcea;	state Exp;
branches;
next	1.4;
deltatype	text;
permissions	666;
commitid	a10426e5cd01ff2;
kopt	kv;
filename	@BlockFileIO.hpp@;

1.4
date	2005.04.25.23.01.32;	author gtarcea;	state Exp;
branches;
next	1.3;
deltatype	text;
permissions	666;
commitid	530426d76af3071;
kopt	kv;
filename	@BlockFileIO.hpp@;

1.3
date	2005.04.22.20.36.29;	author gtarcea;	state Exp;
branches;
next	1.2;
deltatype	text;
permissions	666;
commitid	3b842696031570a;
kopt	kv;
filename	@BlockFileIO.hpp@;

1.2
date	2005.04.22.18.44.51;	author gtarcea;	state Exp;
branches;
next	1.1;
deltatype	text;
permissions	666;
commitid	288426945fa016f;
kopt	kv;
filename	@BlockFileIO.hpp@;

1.1
date	2005.04.19.20.54.34;	author gtarcea;	state Exp;
branches;
next	;
deltatype	text;
permissions	666;
commitid	d6842656fd77a30;
kopt	kv;
filename	@BlockFileIO.hpp@;


desc
@@


1.9
log
@Move FileIO interface to iFileIO. Remove unneeded FileIO.cpp file, change
BlockFileIO.cpp/hpp to reference iFileIO
@
text
@
#ifndef __BlockFileIO_INCLUDE_
#define __BlockFileIO_INCLUDE_

#include "SynerEdge.hpp"
#include "iFileIO.hpp"
#include "iBlockIO.hpp"
#include "FileBlockMap.hpp"

namespace SynerEdge {

class BlockFileIO : public iFileIO {

public:
	BlockFileIO(iBlockIO &blockfile) ;
	virtual ~BlockFileIO() ;

	bool open(string filename, int flags) ;
	bool release() ;
	int read(int64 offset, char *buf, int length) ;
	int write(int64 offset, const char *buf, int length) ;
	int64 getSize() ;
	bool truncate(int64 at) ;
	bool isAccessible(string filename, int flags) ;
	int blockSize() ;
	bool flush() ;
	int64 getBlockFileNumFreeBlocks() ;
	int64 getBlockFileNumBlocks() ;

private:
	// Helper functions
	static int blocksin(int what, int by) ;
	int getBlockNumAtOffset(int64 offset) ;
	bool updateBlockInfo(int64 blocknum, int offsetinblock, int amountwritten) ;
	int64 getLastBlock(int blocksize, int filebytes) ;
	bool extendFile(int64 at, int64 filebytes) ;
	bool truncateFile(int64 at) ;
	bool freeAllBlocksAfter(int64 offset) ;


	// Data members
	iBlockIO &bf ;
	FileBlockMap *map ;
	string filename ;
	bool fileisopen ;
	

} ; // class BlockFileIO

} ; // namespace SynerEdge

#endif // __BlockFileIO_INCLUDE_
@


1.8
log
@
Move BlockFileBase.hpp to iBlockIO.hpp
Cleaned up interfaces to support uint64 rather than int64
VirtualDisk and VirtualBlockFile now also inherit from iBlockIO, so now
BlockFileIO can use any of these interfaces.
@
text
@d6 1
a6 1
#include "FileIO.hpp"
d12 1
a12 1
class BlockFileIO : public FileIO {
@


1.7
log
@Change BlockFileIO to take a &BlockFileBase as the blockfile to write to.
This allows the class to be instantiated with different types of blockfiles,
including a networked blockfile.

Change sygfs.cpp to support the new BlockFileIO class.
@
text
@d7 1
a7 1
#include "BlockFileBase.hpp"
d15 1
a15 1
	BlockFileIO(BlockFileBase &blockfile) ;
d42 1
a42 1
	BlockFileBase &bf ;
@


1.6
log
@Add flush(). Change release() to always write the freeblocklistmap even if
no file is currently open.
@
text
@d7 1
a7 1
#include "BlockFile.hpp"
d15 1
a15 1
	BlockFileIO(string blockfile) ;
d42 1
a42 1
	BlockFile *bf ;
@


1.5
log
@Add methods to get block file free blocks, and total blocks.
@
text
@d26 1
@


1.4
log
@Integrate BlockFileIO with filesystem, debugged against all filesystem tests.
@
text
@d26 2
@


1.3
log
@truncate() working. You can truncate and extend a file with the call.
@
text
@d21 1
a21 1
	int write(int64 offset, char *buf, int length) ;
d24 1
a24 1
	bool isAccessible(int flags) ;
@


1.2
log
@Fix build problems, implement functionality <bleh comment!>
@
text
@d35 1
a35 1
	bool freeAllBlocksAfter(int64 blocknum) ;
@


1.1
log
@
New BlockFile interface and corresponding unit tests. These build, not all
unit tests run. But this has not yet been integrated into the filesystem so
that still runs.
@
text
@d5 1
a5 1
#include <sys/types.h>
d20 4
a23 4
	int read(off_t offset, char *buf, int length) ;
	int write(off_t offset, char *buf, int length) ;
	off_t getSize() ;
	bool truncate(off_t at) ;
d30 7
a36 2
	int getBlockNumAtOffset(off_t offset) ;
	off_t allocateNewBlock() ;
@

