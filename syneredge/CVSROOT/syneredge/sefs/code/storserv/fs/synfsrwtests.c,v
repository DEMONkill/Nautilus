head	1.3;
access;
symbols
	sefs10:1.1.1.1
	syneredge:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2005.04.26.14.28.51;	author gtarcea;	state dead;
branches;
next	1.2;
deltatype	text;
permissions	444;
commitid	65c426e5014765c;
kopt	kv;
filename	@synfsrwtests.c@;

1.2
date	2005.04.25.23.11.34;	author gtarcea;	state Exp;
branches;
next	1.1;
deltatype	text;
permissions	666;
commitid	f84426d78f737e4;
kopt	kv;
filename	@synfsrwtests.c@;

1.1
date	2005.04.08.17.49.32;	author gtarcea;	state Exp;
branches
	1.1.1.1;
next	;
deltatype	text;
permissions	666;

1.1.1.1
date	2005.04.08.17.49.32;	author gtarcea;	state Exp;
branches;
next	;
deltatype	text;
permissions	666;


desc
@@


1.3
log
@Move all test files to utest directory
@
text
@
#include "synfs.h"
#include "tester.h"
#include "fileblockmap.h"
#include "fileblock.h"
#include "next.h"
#include "errno.h"
#include "synfstesterrwutils.h"

static int
init_buffer(char *buf, int length)
{
	int i, j ;
	char *abc="abcdefghijklmnopqrstuvwxy" ; /* 25 in length */

        j = 0 ;
        for(i = 0 ; i < length; i++) {
                if (j == 25) {
                        j = 0 ;
                }
                buf[i] = abc[j] ;
                j++ ;
        }
}

static int
test_open_write_close_existing()
{
	/*
	** We know that test_open_write_close_new() creates a file
	** and writes to it. So, lets just call it again, now
	** the file does exist.
	*/
	return test_open_write_close_new() ;
}


static int 
test_open_read_close_existing()
{
	char *filename = "newfile.txt" ;
	char buf[20] ;
	int buflen = 20 ;
	int amountread ;
	int rc ;

	rc = open_read_file(filename, buf, buflen, &amountread, 1, 1) ;

	if (! rc) {
		printf("open_read_file(%s) failed\n", filename) ;
		return 0 ;
	}

	printf("amountread = %d\n", amountread) ;
	buf[amountread] = 0 ;
	printf("buf = '%s'\n", buf) ;
	if (strcmp(buf, "ABC123") != 0) {
		printf("Buffer did not contain 'ABC123'\n") ;
		return 0 ;
	}

	return 1 ;
}

static int
test_open_read_write_read_close_existing()
{
	char *filename = "nonexistent2.txt" ;
	char *buf = "NOTHING" ;
	char buf2[8] ;
	int rc ;
	int buflen ;
	int amountread ;

	buflen = strlen(buf) ;
	buf2[buflen] = 0 ;

	rc = open_read_file(filename, buf2, buflen, &amountread, 0, 1)  ;
	if (! rc) {
		printf("open_read_file() failed\n") ;
		return 0 ;
	}

	if (amountread <= 0) {
		printf("Read unexpected value (%d)\n", amountread) ;
		return 0 ;
	}

	rc = open_write_to_file(filename, buf, buflen, 0, 0, 0) ;
	if (! rc) {
		printf("open_write_to_file() failed\n") ;
		return 0 ;
	}

	rc = open_read_file(filename, buf2, buflen, &amountread, 1, 0)  ;
	if (! rc) {
		printf("open_read_file() failed\n") ;
		return 0 ;
	}

	if (strcmp(buf2, buf) != 0) {
		printf("Buffers don't compare (they should)\n") ;
		return 0 ;
	}

	return 1 ;
}

static int
test_open_read_close_zero_block_file_existing()
{
	/*
	** We know that test_open_read_close_new() creates a file
	** and doesn't write to it. So, lets just call it again, now
	** the file does exist.
	*/
	return test_open_read_close_new() ;
}

static int
test_read_more_than_written()
{
	char buf[10] ;
	char buf2[100] ;
	int rc ;
	char *filename = "readmorethanwrittentest.txt" ;

	init_buffer(buf, 9) ;

	rc = synfs_open(filename, -43) ;
	if (rc < 0) {
		printf("synfs_open(%s) failed\n", filename) ;
		return 0 ;
	}

	rc = synfs_write(filename, buf, 9, 0) ;
	if (rc != 9) {
		printf("rc returned %d, expected 9\n", rc) ;
		return 0 ;
	}

	rc = synfs_read(filename, buf2, 90, 0) ;

	/*
	** Only 9 bytes written to file, so we should only read 9
	** bytes back!
	*/
	if (rc != 9) {
		printf("synfs_read(%s) returned %d, expected 9\n", filename, rc) ;
		return 0 ;
	}

	return 1 ;
}

static int
test_read_across_blocks()
{
	char buf[1050] ;
	char buf2[100] ;
	int rc ;
	char *filename = "readacrossblockstest.txt" ;

	init_buffer(buf, 1049) ;

	rc = synfs_open(filename, -43) ;
	if (rc < 0) {
		printf("synfs_open(%s) failed\n", filename) ;
		return 0 ;
	}

	rc = synfs_write(filename, buf, 1049, 0) ;
	if (rc != 1049) {
		printf("rc returned %d, expected 1049\n", rc) ;
		return 0 ;
	}

	rc = synfs_read(filename, buf2, 30, 1014) ;

	/*
	** We should only get 30 bytes back.
	*/
	if (rc != 30) {
		printf("synfs_read(%s) returned %d, expected 30\n", filename, rc) ;
		return 0 ;
	}
	buf2[30] = 0 ;
	if (strcmp(buf2, "opqrstuvwxyabcdefghijklmnopqrs") != 0) {
		printf("buf2 contains unexpected value '%s'\n", buf2) ;
		return 0 ;
	}

	return 1 ;
}

static void
run_orwc_existing_tests()
{
	int rc ;

	P("test_open_read_close_zero_block_file_existing()") ;
	rc = test_open_read_close_zero_block_file_existing() ;
	S(rc, "test_open_read_close_zero_block_file_existing()") ;

	P("test_open_write_close_existing()") ;
	rc = test_open_write_close_existing() ;
	S(rc, "test_open_write_close_existing()") ;

	P("test_open_read_close_existing()") ;
	rc = test_open_read_close_existing() ;
	S(rc, "test_open_read_close_existing()") ;

	P("test_open_read_write_read_close_existing()") ;
	rc = test_open_read_write_read_close_existing() ;
	S(rc, "test_open_read_write_close_existing()") ;

	P("test_read_more_than_written()") ;
	rc = test_read_more_than_written() ;
	S(rc, "test_read_more_than_written()") ;

	P("test_read_across_blocks()") ;
	rc = test_read_across_blocks() ;
	S(rc, "test_read_across_blocks()") ;
}

static int
test_open_write_close_new()
{
	char *filename = "newfile.txt" ;
	char *buf = "ABC123" ;
	int buflen ;

	buflen = strlen(buf) ;

	return open_write_to_file(filename, buf, buflen, 1, 0, 1) ;
}

static int
test_open_read_close_new()
{
	char *filename = "nonexistent.txt" ;
	char buf[7] ;
	int buflen = 7 ;
	int rc ;
	int amountread ;

	rc = open_read_file(filename, buf, buflen, &amountread, 1, 1) ;
	if (! rc) {
		printf("open_read_file(%s) failed\n", filename) ;
		return 0 ;
	}

	if (amountread != 0) {
		printf("amountread unexpected value (%d), expected 0\n", amountread) ;
		return 0 ;
	}

	return 1 ;
}

static int
test_open_read_write_read_close_new()
{
	char *filename = "nonexistent2.txt" ;
	char *buf = "NOTHING" ;
	char buf2[8] ;
	int rc ;
	int buflen ;
	int amountread ;

	buflen = strlen(buf) ;
	buf2[buflen] = 0 ;

	rc = open_read_file(filename, buf2, buflen, &amountread, 0, 1)  ;
	if (! rc) {
		printf("open_read_file() failed\n") ;
		return 0 ;
	}

	if (amountread != 0) {
		printf("Read unexpected value (%d), expected 0\n", amountread) ;
		return 0 ;
	}

	rc = open_write_to_file(filename, buf, buflen, 0, 0, 0) ;
	if (! rc) {
		printf("open_write_to_file() failed\n") ;
		return 0 ;
	}

	rc = open_read_file(filename, buf2, buflen, &amountread, 1, 0)  ;
	if (! rc) {
		printf("open_read_file() failed\n") ;
		return 0 ;
	}

	if (strcmp(buf2, buf) != 0) {
		printf("Buffers don't compare (they should)\n") ;
		return 0 ;
	}

	return 1 ;
}

static void
run_orwc_new_tests()
{
	int rc ;

	P("test_open_write_close_new()") ;
	rc = test_open_write_close_new() ;
	S(rc, "test_open_write_close_new()") ;

	P("test_open_read_close_new()") ;
	rc = test_open_read_close_new() ;
	S(rc, "test_open_read_close_new()") ;


	P("test_open_read_write_read_close_new()") ;
	rc = test_open_read_write_read_close_new() ;
	S(rc, "test_open_read_write_read_close_new()") ;
}

static int
test_small_write_offset()
{
	int rc ;
	char *filename = "offsettest.txt" ;
	char buf[10] ;

	strcpy(buf, "ABC") ;

	rc = synfs_open(filename, -43) ;
	if (rc < 0) {
		printf("synfs_open(%s) failed\n", filename) ;
		return 0 ;
	}

	/*
	** First write ABC to file.
	*/
	rc = synfs_write(filename, buf, 3, 0) ;
	if (rc != 3) {
		printf("synfs_write() returned %d instead of 3\n", rc) ;
		return 0 ;
	}

	/*
	** Now write ABC offset by one, thus the file should contain
	** one block that has AABC in it.
	*/
	rc = synfs_write(filename, buf, 3, 1) ;
	if (rc != 3) {
		printf("synfs_write() returned %d instead of 3\n", rc) ;
		return 0 ;
	}

	/*
	** Now read and see what we got.
	*/
	rc = synfs_read(filename, buf, 4, 0) ;
	if (rc != 4) {
		printf("synfs_read() returned %d instead of 4\n", rc) ;
		return 0 ;
	}
	buf[rc] = 0 ;

	if (strcmp(buf, "AABC") != 0) {
		printf("Buf did not contain 'AABC', read in '%s'\n", buf) ;
		return 0 ;
	}

	rc = synfs_release(filename, 0) ;
	if (rc != 0) {
		printf("synfs_release(%s) failed\n", filename) ;
		return 0 ;
	}

	return 1 ;
}

static int
test_large_buffer_write()
{
	/*
	** This will test writing a buffer that is larger
	** than blocksize and ensuring that it gets written
	** over multiple buffers.
	*/
	int rc ;
	char *filename = "largewritetest.txt" ;
	char buf[2052] ;

	init_buffer(buf, 2051) ;

	rc = synfs_open(filename, -43) ;
	if (rc < 0) {
		printf("synfs_open(%s) failed\n", filename) ;
		return 0 ;
	}

	rc = synfs_write(filename, buf, 2051, 0) ;
	if (rc != 2051) {
		printf("rc returned %d, expected 2051\n", rc) ;
		return 0 ;
	}

	rc = synfs_write(filename, buf, 1028, 1) ;

	/*
	** Look at blocks to make sure they are correct.
	**
	** Still need to put this in!!!
	**
	*/

	return 1 ;
}

static int
test_large_buffer_read()
{
	int rc ;
	char buf1[2052] ;
	char buf2[2052] ;
	char *filename = "largebufferreadtest.txt" ;

	init_buffer(buf1, 2051) ;
	buf1[2051] = 0 ;
	buf2[2051] = 0 ;

	rc = synfs_open(filename, -43) ;
	if (rc < 0) {
		printf("synfs_open(%s) failed\n", filename) ;
		return 0 ;
	}

	rc = synfs_write(filename, buf1, 2051, 0) ;
	if (rc != 2051) {
		printf("rc returned %d, expected 2051\n", rc) ;
		return 0 ;
	}

	rc = synfs_read(filename, buf2, 2051, 0) ;
	if (rc != 2051) {
		printf("synfs_read(%s) returned %d, expected 2051\n", filename, rc) ;
		return 0 ;
	}

	if (strcmp(buf1, buf2) != 0) {
		printf("buf1 and buf2 differ\n") ;
		return 0 ;
	}

	return 1 ;
}

static int
test_large_offset_and_other_offset_reads()
{
	/*
	** Use file created from test_large_buffer_read()
	*/
	char *filename = "largebufferreadtest.txt" ;
	char buf[26] ;
	int rc ;

	rc = synfs_read(filename, buf, 25, 1026) ;
	if (rc != 25) {
		printf("synfs_read(%s) returned %d, expected 25\n", filename, rc) ;
		return 0 ;
	}

	buf[25] = 0 ;
	if (strcmp(buf, "bcdefghijklmnopqrstuvwxya") != 0) {
		printf("buf contains '%s', expected 'bcdefghijklmnopqrstuvwxya'\n", buf) ;
		return 0 ;
	}


	rc = synfs_read(filename, buf, 25, 1025) ;
	if (rc != 25) {
		printf("synfs_read(%s) returned %d, expected 25\n", filename, rc) ;
		return 0 ;
	}

	buf[25] = 0 ;
	if (strcmp(buf, "abcdefghijklmnopqrstuvwxy") != 0) {
		printf("buf contains '%s', expected 'abcdefghijklmnopqrstuvwxy'\n", buf) ;
		return 0 ;
	}

	rc = synfs_read(filename, buf, 25, 0) ;
	if (rc != 25) {
		printf("synfs_read(%s) returned %d, expected 25\n", filename, rc) ;
		return 0 ;
	}

	buf[25] = 0 ;
	if (strcmp(buf, "abcdefghijklmnopqrstuvwxy") != 0) {
		printf("buf contains '%s', expected 'abcdefghijklmnopqrstuvwxy'\n", buf) ;
		return 0 ;
	}

	return 1 ;
}

void
run_offset_tests()
{
	int rc ;

	P("test_small_write_offset()") ;
	rc = test_small_write_offset() ;
	S(rc, "test_small_write_offset()") ;

	P("test_large_buffer_write()") ;
	rc = test_large_buffer_write() ;
	S(rc, "test_large_buffer_write()") ;

	P("test_large_buffer_read()") ;
	rc = test_large_buffer_read() ;
	S(rc, "test_large_buffer_read()") ;

	P("test_large_offset_and_other_offset_reads()") ;
	rc = test_large_offset_and_other_offset_reads() ;
	S(rc, "test_large_offset_and_other_offset_reads()") ;
}

static int
Setup_RW_Tests()
{
	system("rm -f /etc/syneredge/fbmap/*") ;
	system("utblocksclean.sh") ;
}

void
run_rw_tests()
{
	/* orwc = (o)pen (r)ead (w)rite (c)lose */
	printf("run_rw_tests()\n") ;
	Setup_RW_Tests() ;
	run_orwc_new_tests() ;
	run_orwc_existing_tests() ;
	run_offset_tests() ;
}
@


1.2
log
@Fixed tests to work with new BlockFileIO port. Offsets were not correct in
tests (how did we ever work???), but are now. Don't test mirrored block
writes since we don't do that right now.
@
text
@@


1.1
log
@Initial revision
@
text
@d89 1
a89 1
	rc = open_write_to_file(filename, buf, buflen, 0, 1, 0) ;
d188 1
a188 1
	if (strcmp(buf2, "nopqrstuvwxyabcdefghijklmnopqr") != 0) {
d235 1
a235 1
	return open_write_to_file(filename, buf, buflen, 1, 1, 1) ;
d285 1
a285 1
	rc = open_write_to_file(filename, buf, buflen, 0, 1, 0) ;
d475 2
a476 2
	if (strcmp(buf, "abcdefghijklmnopqrstuvwxy") != 0) {
		printf("buf contains '%s', expected 'abcdefghijklmnopqrstuvwxy'\n", buf) ;
d488 2
a489 2
	if (strcmp(buf, "yabcdefghijklmnopqrstuvwx") != 0) {
		printf("buf contains '%s', expected 'yabcdefghijklmnopqrstuvwx'\n", buf) ;
@


1.1.1.1
log
@Setup CVS
@
text
@@
